[
  {
    "__docId__": 0,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/main.js",
    "memberof": null,
    "longname": "src/main.js",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "content": "/**\r\n * Copyright (C) 2016 Michael Kourlas\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\"use strict\";\r\n\r\nimport XmlAttribute from \"./nodes/XmlAttribute\";\r\nimport XmlCdata from \"./nodes/XmlCdata\";\r\nimport XmlCharRef from \"./nodes/XmlCharRef\";\r\nimport XmlComment from \"./nodes/XmlComment\";\r\nimport XmlDecl from \"./nodes/XmlDecl\";\r\nimport XmlDocument from \"./nodes/XmlDocument\";\r\nimport XmlDtd from \"./nodes/XmlDtd\";\r\nimport XmlDtdAttlist from \"./nodes/XmlDtdAttlist\";\r\nimport XmlDtdElement from \"./nodes/XmlDtdElement\";\r\nimport XmlDtdEntity from \"./nodes/XmlDtdEntity\";\r\nimport XmlDtdNotation from \"./nodes/XmlDtdNotation\";\r\nimport XmlDtdParamEntityRef from \"./nodes/XmlDtdParamEntityRef\";\r\nimport XmlElement from \"./nodes/XmlElement\";\r\nimport XmlEntityRef from \"./nodes/XmlEntityRef\";\r\nimport XmlNode from \"./nodes/XmlNode\";\r\nimport XmlProcInst from \"./nodes/XmlProcInst\";\r\nimport XmlText from \"./nodes/XmlText\";\r\n\r\nexport {XmlAttribute, XmlCdata, XmlCharRef, XmlComment, XmlDecl, XmlDocument,\r\n    XmlDtd, XmlDtdAttlist, XmlDtdElement, XmlDtdEntity, XmlDtdNotation,\r\n    XmlDtdParamEntityRef, XmlElement, XmlEntityRef, XmlNode, XmlProcInst,\r\n    XmlText};\r\n\r\n/**\r\n * Creates a new XML document.\r\n *\r\n * @param {string} root The name of the root element of the document.\r\n *\r\n * @returns {XmlDocument} The new XML document.\r\n */\r\nexport function document(root) {\r\n    return new XmlDocument(root);\r\n}"
  },
  {
    "__docId__": 1,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "document",
    "memberof": "src/main.js",
    "longname": "src/main.js~document",
    "access": null,
    "export": true,
    "importPath": "xmlcreate/lib/main.js",
    "importStyle": "{document}",
    "description": "Creates a new XML document.",
    "lineNumber": 49,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{XmlDocument} The new XML document."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "root",
        "description": "The name of the root element of the document."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "XmlDocument"
      ],
      "spread": false,
      "description": "The new XML document."
    },
    "generator": false
  },
  {
    "__docId__": 2,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/nodes/XmlAttribute.js",
    "memberof": null,
    "longname": "src/nodes/XmlAttribute.js",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "content": "/**\r\n * Copyright (C) 2016 Michael Kourlas\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\"use strict\";\r\n\r\nimport {typeCheck} from \"type-check\";\r\n\r\nimport * as escape from \"../utils/escape\";\r\nimport * as stringOptions from \"../options/string\";\r\nimport * as validate from \"../utils/validate\";\r\n\r\nimport XmlCharRef from \"./XmlCharRef\";\r\nimport XmlEntityRef from \"./XmlEntityRef\";\r\nimport XmlNode from \"./XmlNode\";\r\nimport XmlText from \"./XmlText\";\r\n\r\n/**\r\n * Represents an XML element attribute.\r\n *\r\n * An XML element attribute is part of the start tag of an element and is\r\n * structured as follows, where <code>{name}</code> is the name of the attribute\r\n * and <code>{value}</code> is the value of the attribute:\r\n *\r\n * <code>&lt;element {name}=\"{value}\"&gt;</code>\r\n *\r\n * The <code>{name}</code> value is a property of this node, while the\r\n * <code>{value}</code> property consists of the children of this node.\r\n *\r\n * XmlAttribute nodes must have at least one child, and can have an unlimited\r\n * number of {@link XmlCharRef}, {@link XmlEntityRef}, and {@link XmlText}\r\n * nodes as children.\r\n */\r\nexport default class XmlAttribute extends XmlNode {\r\n    /**\r\n     * Initializes a new instance of the {@link XmlAttribute} class.\r\n     *\r\n     * @param {string} name             The name of the XML attribute.\r\n     * @param {XmlNode|XmlNode[]} value The initial value of the XML attribute.\r\n     *                                  Additional children can be added later.\r\n     *                                  Only {@link XmlCharRef},\r\n     *                                  {@link XmlEntityRef}, and\r\n     *                                  {@link XmlText} nodes are permitted.\r\n     */\r\n    constructor(name, value) {\r\n        super();\r\n        this.name = name;\r\n        if (typeCheck(\"Array\", value)) {\r\n            for (let node of value) {\r\n                this.insertChild(node);\r\n            }\r\n        } else {\r\n            this.insertChild(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the name of this attribute.\r\n     *\r\n     * @returns {string} The name of this attribute.\r\n     */\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    /**\r\n     * Sets the name of this attribute.\r\n     *\r\n     * @param {string} name The name of this attribute.\r\n     */\r\n    set name(name) {\r\n        if (!typeCheck(\"String\", name)) {\r\n            throw new TypeError(\"name should be a string\");\r\n        } else if (!validate.name(name)) {\r\n            throw new Error(\"name should not contain characters not\" +\r\n                \" allowed in XML names\");\r\n        }\r\n        this._name = name;\r\n    }\r\n\r\n    /**\r\n     * Inserts a new XML character reference at the specified index.\r\n     *\r\n     * @param {string} char    The character to represent using the reference.\r\n     * @param {boolean} [hex]  Whether to use the hexadecimal or decimal\r\n     *                         representation for the reference. If left\r\n     *                         undefined, decimal is the default.\r\n     * @param {number} [index] The index at which the node should be inserted.\r\n     *                         If no index is specified, the node is inserted\r\n     *                         at the end of this node's children.\r\n     *\r\n     * @returns {XmlCharRef} The newly created XML declaration.\r\n     */\r\n    charRef(char, hex, index) {\r\n        let charRef = new XmlCharRef(char, hex);\r\n        this.insertChild(charRef, index);\r\n        return charRef;\r\n    }\r\n\r\n    /**\r\n     * Inserts a new XML entity reference at the specified index.\r\n     *\r\n     * @param {string} entity  The entity to be referenced.\r\n     * @param {number} [index] The index at which the node should be inserted.\r\n     *                         If no index is specified, the node is inserted\r\n     *                         at the end of this node's children.\r\n     *\r\n     * @returns {XmlEntityRef} The newly created XML declaration.\r\n     */\r\n    entityRef(entity, index) {\r\n        let charRef = new XmlEntityRef(entity);\r\n        this.insertChild(charRef, index);\r\n        return charRef;\r\n    }\r\n\r\n    /**\r\n     * Inserts the specified node into this node's children at the specified\r\n     * index. The node is not inserted if it is already present. If this node\r\n     * already has a parent, it is removed from that parent.\r\n     *\r\n     * Note that only {@link XmlCharRef}, {@link XmlEntityRef}, and\r\n     * {@link XmlText} nodes can be inserted; otherwise, an exception will be\r\n     * thrown.\r\n     *\r\n     * @param {XmlNode} node   The node to insert.\r\n     * @param {number} [index] The index at which to insert the node. Nodes at\r\n     *                         or after the index are shifted to the right. If\r\n     *                         no index is specified, the node is inserted at\r\n     *                         the end.\r\n     *\r\n     * @returns {XmlNode} The node inserted into this node's children, or\r\n     *                    undefined if no node was inserted.\r\n     */\r\n    insertChild(node, index) {\r\n        if (!(node instanceof XmlCharRef || node instanceof XmlEntityRef ||\r\n            node instanceof XmlText)) {\r\n            throw new TypeError(\"node should be an instance of XmlCharRef,\" +\r\n                \" XmlEntityRef, or XmlText\");\r\n        }\r\n        return super.insertChild(node, index);\r\n    }\r\n\r\n    /**\r\n     * Removes the specified node from this node's children.\r\n     *\r\n     * Note that this node must have at least one child. Attempts to remove\r\n     * the last child node will result in an exception.\r\n     *\r\n     * @param {XmlNode} node The node to remove.\r\n     *\r\n     * @returns {boolean} Whether a node was removed.\r\n     */\r\n    removeChild(node) {\r\n        if (this._children.length === 1) {\r\n            throw new Error(\"XmlAttribute nodes must have at least one child\");\r\n        }\r\n        return super.removeChild(node);\r\n    }\r\n\r\n    /**\r\n     * Removes the node at the specified index from this node's children.\r\n     *\r\n     * Note that this node must have at least one child. Attempts to remove\r\n     * the last child node will result in an exception.\r\n     *\r\n     * @param {number} index The index at which the node to be removed is\r\n     *                       located.\r\n     *\r\n     * @returns {XmlNode} The node that was removed, or undefined if no node\r\n     *                    was removed.\r\n     */\r\n    removeChildAtIndex(index) {\r\n        if (this._children.length === 1) {\r\n            throw new Error(\"XmlAttribute nodes must have at least one child\");\r\n        }\r\n        return super.removeChildAtIndex(index);\r\n    }\r\n\r\n    /**\r\n     * Inserts a new XML text node at the specified index.\r\n     *\r\n     * @param {string} text    Arbitrary character data.\r\n     * @param {number} [index] The index at which the node should be inserted.\r\n     *                         If no index is specified, the node is inserted\r\n     *                         at the end of this node's children.\r\n     *\r\n     * @returns {XmlText} The newly created XML declaration.\r\n     */\r\n    text(text, index) {\r\n        let textNode = new XmlText(text);\r\n        this.insertChild(textNode, index);\r\n        return textNode;\r\n    }\r\n\r\n    /**\r\n     * Returns an XML string representation of this node.\r\n     *\r\n     * @param {StringOptions} [options] Formatting options for the string\r\n     *                                  representation.\r\n     *\r\n     * @returns {string} An XML string representation of this node.\r\n     */\r\n    toString(options = {}) {\r\n        stringOptions.validate(options);\r\n\r\n        let quote = options.doubleQuotes ? \"\\\"\" : \"'\";\r\n        let str = this.name + \"=\" + quote;\r\n        for (let child of this._children) {\r\n            if (options.doubleQuotes) {\r\n                str += escape.doubleQuotes(child.toString(options));\r\n            } else {\r\n                str += escape.singleQuotes(child.toString(options));\r\n            }\r\n        }\r\n        str += quote;\r\n        return str;\r\n    }\r\n}\r\n"
  },
  {
    "__docId__": 3,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "XmlAttribute",
    "memberof": "src/nodes/XmlAttribute.js",
    "longname": "src/nodes/XmlAttribute.js~XmlAttribute",
    "access": null,
    "export": true,
    "importPath": "xmlcreate/lib/nodes/XmlAttribute.js",
    "importStyle": "XmlAttribute",
    "description": "Represents an XML element attribute.\n\nAn XML element attribute is part of the start tag of an element and is\nstructured as follows, where <code>{name}</code> is the name of the attribute\nand <code>{value}</code> is the value of the attribute:\n\n<code>&lt;element {name}=\"{value}\"&gt;</code>\n\nThe <code>{name}</code> value is a property of this node, while the\n<code>{value}</code> property consists of the children of this node.\n\nXmlAttribute nodes must have at least one child, and can have an unlimited\nnumber of {@link XmlCharRef}, {@link XmlEntityRef}, and {@link XmlText}\nnodes as children.",
    "lineNumber": 46,
    "interface": false,
    "extends": [
      "src/nodes/XmlNode.js~XmlNode"
    ]
  },
  {
    "__docId__": 4,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/nodes/XmlAttribute.js~XmlAttribute",
    "longname": "src/nodes/XmlAttribute.js~XmlAttribute#constructor",
    "access": null,
    "description": "Initializes a new instance of the {@link XmlAttribute} class.",
    "lineNumber": 57,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the XML attribute."
      },
      {
        "nullable": null,
        "types": [
          "XmlNode",
          "XmlNode[]"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The initial value of the XML attribute.\n                                 Additional children can be added later.\n                                 Only {@link XmlCharRef},\n                                 {@link XmlEntityRef}, and\n                                 {@link XmlText} nodes are permitted."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 5,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "name",
    "memberof": "src/nodes/XmlAttribute.js~XmlAttribute",
    "longname": "src/nodes/XmlAttribute.js~XmlAttribute#name",
    "access": null,
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 6,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "name",
    "memberof": "src/nodes/XmlAttribute.js~XmlAttribute",
    "longname": "src/nodes/XmlAttribute.js~XmlAttribute#name",
    "access": null,
    "description": "Gets the name of this attribute.",
    "lineNumber": 74,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} The name of this attribute."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The name of this attribute."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 7,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "name",
    "memberof": "src/nodes/XmlAttribute.js~XmlAttribute",
    "longname": "src/nodes/XmlAttribute.js~XmlAttribute#name",
    "access": null,
    "description": "Sets the name of this attribute.",
    "lineNumber": 83,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of this attribute."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 8,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_name",
    "memberof": "src/nodes/XmlAttribute.js~XmlAttribute",
    "longname": "src/nodes/XmlAttribute.js~XmlAttribute#_name",
    "access": null,
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 9,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "charRef",
    "memberof": "src/nodes/XmlAttribute.js~XmlAttribute",
    "longname": "src/nodes/XmlAttribute.js~XmlAttribute#charRef",
    "access": null,
    "description": "Inserts a new XML character reference at the specified index.",
    "lineNumber": 106,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{XmlCharRef} The newly created XML declaration."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "char",
        "description": "The character to represent using the reference."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "hex",
        "description": "Whether to use the hexadecimal or decimal\n                        representation for the reference. If left\n                        undefined, decimal is the default."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "index",
        "description": "The index at which the node should be inserted.\n                        If no index is specified, the node is inserted\n                        at the end of this node's children."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "XmlCharRef"
      ],
      "spread": false,
      "description": "The newly created XML declaration."
    },
    "generator": false
  },
  {
    "__docId__": 10,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "entityRef",
    "memberof": "src/nodes/XmlAttribute.js~XmlAttribute",
    "longname": "src/nodes/XmlAttribute.js~XmlAttribute#entityRef",
    "access": null,
    "description": "Inserts a new XML entity reference at the specified index.",
    "lineNumber": 122,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{XmlEntityRef} The newly created XML declaration."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "entity",
        "description": "The entity to be referenced."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "index",
        "description": "The index at which the node should be inserted.\n                        If no index is specified, the node is inserted\n                        at the end of this node's children."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "XmlEntityRef"
      ],
      "spread": false,
      "description": "The newly created XML declaration."
    },
    "generator": false
  },
  {
    "__docId__": 11,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "insertChild",
    "memberof": "src/nodes/XmlAttribute.js~XmlAttribute",
    "longname": "src/nodes/XmlAttribute.js~XmlAttribute#insertChild",
    "access": null,
    "description": "Inserts the specified node into this node's children at the specified\nindex. The node is not inserted if it is already present. If this node\nalready has a parent, it is removed from that parent.\n\nNote that only {@link XmlCharRef}, {@link XmlEntityRef}, and\n{@link XmlText} nodes can be inserted; otherwise, an exception will be\nthrown.",
    "lineNumber": 146,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{XmlNode} The node inserted into this node's children, or\n                   undefined if no node was inserted."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "XmlNode"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "The node to insert."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "index",
        "description": "The index at which to insert the node. Nodes at\n                        or after the index are shifted to the right. If\n                        no index is specified, the node is inserted at\n                        the end."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "XmlNode"
      ],
      "spread": false,
      "description": "The node inserted into this node's children, or\n                   undefined if no node was inserted."
    },
    "generator": false
  },
  {
    "__docId__": 12,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeChild",
    "memberof": "src/nodes/XmlAttribute.js~XmlAttribute",
    "longname": "src/nodes/XmlAttribute.js~XmlAttribute#removeChild",
    "access": null,
    "description": "Removes the specified node from this node's children.\n\nNote that this node must have at least one child. Attempts to remove\nthe last child node will result in an exception.",
    "lineNumber": 165,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} Whether a node was removed."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "XmlNode"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "The node to remove."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether a node was removed."
    },
    "generator": false
  },
  {
    "__docId__": 13,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeChildAtIndex",
    "memberof": "src/nodes/XmlAttribute.js~XmlAttribute",
    "longname": "src/nodes/XmlAttribute.js~XmlAttribute#removeChildAtIndex",
    "access": null,
    "description": "Removes the node at the specified index from this node's children.\n\nNote that this node must have at least one child. Attempts to remove\nthe last child node will result in an exception.",
    "lineNumber": 184,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{XmlNode} The node that was removed, or undefined if no node\n                   was removed."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "The index at which the node to be removed is\n                      located."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "XmlNode"
      ],
      "spread": false,
      "description": "The node that was removed, or undefined if no node\n                   was removed."
    },
    "generator": false
  },
  {
    "__docId__": 14,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "text",
    "memberof": "src/nodes/XmlAttribute.js~XmlAttribute",
    "longname": "src/nodes/XmlAttribute.js~XmlAttribute#text",
    "access": null,
    "description": "Inserts a new XML text node at the specified index.",
    "lineNumber": 201,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{XmlText} The newly created XML declaration."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "Arbitrary character data."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "index",
        "description": "The index at which the node should be inserted.\n                        If no index is specified, the node is inserted\n                        at the end of this node's children."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "XmlText"
      ],
      "spread": false,
      "description": "The newly created XML declaration."
    },
    "generator": false
  },
  {
    "__docId__": 15,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toString",
    "memberof": "src/nodes/XmlAttribute.js~XmlAttribute",
    "longname": "src/nodes/XmlAttribute.js~XmlAttribute#toString",
    "access": null,
    "description": "Returns an XML string representation of this node.",
    "lineNumber": 215,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} An XML string representation of this node."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "StringOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "Formatting options for the string\n                                 representation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "An XML string representation of this node."
    },
    "generator": false
  },
  {
    "__docId__": 16,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/nodes/XmlCdata.js",
    "memberof": null,
    "longname": "src/nodes/XmlCdata.js",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "content": "/**\r\n * Copyright (C) 2016 Michael Kourlas\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\"use strict\";\r\n\r\nimport {typeCheck} from \"type-check\";\r\n\r\nimport * as validate from \"../utils/validate\";\r\n\r\nimport XmlNode from \"./XmlNode\";\r\n\r\n/**\r\n * Represents an XML CDATA section.\r\n *\r\n * An XML CDATA section is structured as follows, where <code>{data}</code> is\r\n * the character data of the section:\r\n *\r\n * <code>&lt;![CDATA[{data}]]&gt;</code>\r\n *\r\n * The <code>{data}</code> value is a property of this node.\r\n *\r\n * XmlCdata nodes cannot have any children.\r\n */\r\nexport default class XmlCdata extends XmlNode {\r\n    /**\r\n     * Initializes a new instance of the {@link XmlCdata} class.\r\n     *\r\n     * @param {string} data The character data of the CDATA section.\r\n     */\r\n    constructor(data) {\r\n        super();\r\n        this.data = data;\r\n    }\r\n\r\n    /**\r\n     * Gets the character data of the CDATA section.\r\n     *\r\n     * @returns {string} The character data of the CDATA section.\r\n     */\r\n    get data() {\r\n        return this._data;\r\n    }\r\n\r\n    /**\r\n     * Sets the character data of the CDATA section.\r\n     *\r\n     * @param {string} data The character data of the CDATA section.\r\n     */\r\n    set data(data) {\r\n        if (!typeCheck(\"String\", data)) {\r\n            throw new TypeError(\"character data should be a string\");\r\n        } else if (!validate.char(data)) {\r\n            throw new Error(\"character data should not contain characters not\" +\r\n                \" allowed in XML\");\r\n        } else if (/]]>/.test(data)) {\r\n            throw new Error(\"data should not contain the string ']]>'\");\r\n        }\r\n        this._data = data;\r\n    }\r\n\r\n    /**\r\n     * Throws an exception since {@link XmlCdata} nodes cannot have any\r\n     * children.\r\n     */\r\n    children() {\r\n        throw new Error(\"XmlCdata nodes cannot have children\");\r\n    }\r\n\r\n    /**\r\n     * Throws an exception since {@link XmlCdata} nodes cannot have any\r\n     * children.\r\n     */\r\n    insertChild(node, index) {\r\n        throw new Error(\"XmlCdata nodes cannot have children\");\r\n    }\r\n\r\n    /**\r\n     * Throws an exception since {@link XmlCdata} nodes cannot have any\r\n     * children.\r\n     */\r\n    removeChild(node) {\r\n        throw new Error(\"XmlCdata nodes cannot have children\");\r\n    }\r\n\r\n    /**\r\n     * Throws an exception since {@link XmlCdata} nodes cannot have any\r\n     * children.\r\n     */\r\n    removeChildAtIndex(index) {\r\n        throw new Error(\"XmlCdata nodes cannot have children\");\r\n    }\r\n\r\n    /**\r\n     * Returns an XML string representation of this node.\r\n     *\r\n     * @param {StringOptions} [options] Formatting options for the string\r\n     *                                  representation.\r\n     *\r\n     * @returns {string} An XML string representation of this node.\r\n     */\r\n    toString(options = {}) {\r\n        return \"<![CDATA[\" + this.data + \"]]>\";\r\n    }\r\n}\r\n"
  },
  {
    "__docId__": 17,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "XmlCdata",
    "memberof": "src/nodes/XmlCdata.js",
    "longname": "src/nodes/XmlCdata.js~XmlCdata",
    "access": null,
    "export": true,
    "importPath": "xmlcreate/lib/nodes/XmlCdata.js",
    "importStyle": "XmlCdata",
    "description": "Represents an XML CDATA section.\n\nAn XML CDATA section is structured as follows, where <code>{data}</code> is\nthe character data of the section:\n\n<code>&lt;![CDATA[{data}]]&gt;</code>\n\nThe <code>{data}</code> value is a property of this node.\n\nXmlCdata nodes cannot have any children.",
    "lineNumber": 37,
    "interface": false,
    "extends": [
      "src/nodes/XmlNode.js~XmlNode"
    ]
  },
  {
    "__docId__": 18,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/nodes/XmlCdata.js~XmlCdata",
    "longname": "src/nodes/XmlCdata.js~XmlCdata#constructor",
    "access": null,
    "description": "Initializes a new instance of the {@link XmlCdata} class.",
    "lineNumber": 43,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The character data of the CDATA section."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 19,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "data",
    "memberof": "src/nodes/XmlCdata.js~XmlCdata",
    "longname": "src/nodes/XmlCdata.js~XmlCdata#data",
    "access": null,
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 20,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "data",
    "memberof": "src/nodes/XmlCdata.js~XmlCdata",
    "longname": "src/nodes/XmlCdata.js~XmlCdata#data",
    "access": null,
    "description": "Gets the character data of the CDATA section.",
    "lineNumber": 53,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} The character data of the CDATA section."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The character data of the CDATA section."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 21,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "data",
    "memberof": "src/nodes/XmlCdata.js~XmlCdata",
    "longname": "src/nodes/XmlCdata.js~XmlCdata#data",
    "access": null,
    "description": "Sets the character data of the CDATA section.",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The character data of the CDATA section."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 22,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_data",
    "memberof": "src/nodes/XmlCdata.js~XmlCdata",
    "longname": "src/nodes/XmlCdata.js~XmlCdata#_data",
    "access": null,
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 23,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "children",
    "memberof": "src/nodes/XmlCdata.js~XmlCdata",
    "longname": "src/nodes/XmlCdata.js~XmlCdata#children",
    "access": null,
    "description": "Throws an exception since {@link XmlCdata} nodes cannot have any\nchildren.",
    "lineNumber": 78,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 24,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "insertChild",
    "memberof": "src/nodes/XmlCdata.js~XmlCdata",
    "longname": "src/nodes/XmlCdata.js~XmlCdata#insertChild",
    "access": null,
    "description": "Throws an exception since {@link XmlCdata} nodes cannot have any\nchildren.",
    "lineNumber": 86,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 25,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeChild",
    "memberof": "src/nodes/XmlCdata.js~XmlCdata",
    "longname": "src/nodes/XmlCdata.js~XmlCdata#removeChild",
    "access": null,
    "description": "Throws an exception since {@link XmlCdata} nodes cannot have any\nchildren.",
    "lineNumber": 94,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 26,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeChildAtIndex",
    "memberof": "src/nodes/XmlCdata.js~XmlCdata",
    "longname": "src/nodes/XmlCdata.js~XmlCdata#removeChildAtIndex",
    "access": null,
    "description": "Throws an exception since {@link XmlCdata} nodes cannot have any\nchildren.",
    "lineNumber": 102,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 27,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toString",
    "memberof": "src/nodes/XmlCdata.js~XmlCdata",
    "longname": "src/nodes/XmlCdata.js~XmlCdata#toString",
    "access": null,
    "description": "Returns an XML string representation of this node.",
    "lineNumber": 114,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} An XML string representation of this node."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "StringOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "Formatting options for the string\n                                 representation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "An XML string representation of this node."
    },
    "generator": false
  },
  {
    "__docId__": 28,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/nodes/XmlCharRef.js",
    "memberof": null,
    "longname": "src/nodes/XmlCharRef.js",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "content": "/**\r\n * Copyright (C) 2016 Michael Kourlas\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\"use strict\";\r\n\r\nimport {typeCheck} from \"type-check\";\r\n\r\nimport * as validate from \"../utils/validate\";\r\n\r\nimport XmlNode from \"./XmlNode\";\r\n\r\n/**\r\n * Represents an XML character reference.\r\n *\r\n * An XML character reference is structured as follows, where\r\n * <code>{dec}</code> is the decimal representation code point corresponding to\r\n * a particular Unicode character:\r\n *\r\n * <code>&amp;#{num};</code>\r\n *\r\n * The corresponding hexadecimal version is structured as follows, where\r\n * <code>{hex}</code> is the hexadecimal representation code point corresponding\r\n * to a particular Unicode character:\r\n *\r\n * <code>&amp;#x{hex};</code>\r\n *\r\n * Unicode characters outside of the Basic Multilingual Plane are represented\r\n * using a surrogate pair consisting of two character references.\r\n *\r\n * The <code>{dec}</code> and <code>{hex}</code> values are defined by the\r\n * <code>{char}</code> and <code>{hex}</code> properties of this node; the\r\n * former is the character to be represented while the latter indicates whether\r\n * the decimal or hexadecimal representation should be used.\r\n *\r\n * XmlCharRef nodes cannot have any children.\r\n */\r\nexport default class XmlCharRef extends XmlNode {\r\n    /**\r\n     * Initializes a new instance of the {@link XmlCharRef} class.\r\n     *\r\n     * @param {string} char   The character to represent using the reference.\r\n     * @param {boolean} [hex] Whether to use the hexadecimal or decimal\r\n     *                        representation for the reference. If left\r\n     *                        undefined, decimal is the default.\r\n     */\r\n    constructor(char, hex = false) {\r\n        super();\r\n        this.char = char;\r\n        this.hex = hex;\r\n    }\r\n\r\n    /**\r\n     * Gets the character to represent using the reference.\r\n     *\r\n     * @returns {string} The character to represent using the reference.\r\n     */\r\n    get char() {\r\n        return this._char;\r\n    }\r\n\r\n    /**\r\n     * Sets the character to represent using the reference.\r\n     *\r\n     * @param {string} char The character to represent using the reference.\r\n     */\r\n    set char(char) {\r\n        if (!typeCheck(\"String\", char)) {\r\n            throw new TypeError(\"char should be a string\");\r\n        } else if (!validate.singleChar(char)) {\r\n            throw new Error(\"char should contain a single character, and this\" +\r\n                \" character should be allowed in XML\");\r\n        }\r\n        this._char = char;\r\n    }\r\n\r\n    /**\r\n     * Gets whether or not to use the hexadecimal or decimal representation for\r\n     * the reference.\r\n     *\r\n     * @returns {boolean} Whether or not to use the hexadecimal or decimal\r\n     *                    representation for the reference.\r\n     */\r\n    get hex() {\r\n        return this._hex;\r\n    }\r\n\r\n    /**\r\n     * Sets whether or not to use the hexadecimal or decimal representation for\r\n     * the reference.\r\n     *\r\n     * @param {boolean} hex Whether or not to use the hexadecimal or decimal\r\n     *                      representation for the reference.\r\n     */\r\n    set hex(hex) {\r\n        if (!typeCheck(\"Boolean\", hex)) {\r\n            throw new TypeError(\"hex should be a boolean\");\r\n        }\r\n        this._hex = hex;\r\n    }\r\n\r\n    /**\r\n     * Throws an exception since {@link XmlCharRef} nodes cannot have any\r\n     * children.\r\n     */\r\n    children() {\r\n        throw new Error(\"XmlCharRef nodes cannot have children\");\r\n    }\r\n\r\n    /**\r\n     * Throws an exception since {@link XmlCharRef} nodes cannot have any\r\n     * children.\r\n     */\r\n    insertChild(node, index) {\r\n        throw new Error(\"XmlCharRef nodes cannot have children\");\r\n    }\r\n\r\n    /**\r\n     * Throws an exception since {@link XmlCharRef} nodes cannot have any\r\n     * children.\r\n     */\r\n    removeChild(node) {\r\n        throw new Error(\"XmlCharRef nodes cannot have children\");\r\n    }\r\n\r\n    /**\r\n     * Throws an exception since {@link XmlCharRef} nodes cannot have any\r\n     * children.\r\n     */\r\n    removeChildAtIndex(index) {\r\n        throw new Error(\"XmlCharRef nodes cannot have children\");\r\n    }\r\n\r\n    /**\r\n     * Returns an XML string representation of this node.\r\n     *\r\n     * @param {StringOptions} [options] Formatting options for the string\r\n     *                                  representation.\r\n     *\r\n     * @returns {string} An XML string representation of this node.\r\n     */\r\n    toString(options = {}) {\r\n        let char;\r\n        if (this.char.length === 1) {\r\n            char = this.char.charCodeAt(0);\r\n        } else {\r\n            char = String.codePointAt(this.char, 0);\r\n        }\r\n\r\n        if (this.hex) {\r\n            return \"&#x\" + char.toString(16) + \";\";\r\n        } else {\r\n            return \"&#\" + char + \";\";\r\n        }\r\n    }\r\n}\r\n"
  },
  {
    "__docId__": 29,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "XmlCharRef",
    "memberof": "src/nodes/XmlCharRef.js",
    "longname": "src/nodes/XmlCharRef.js~XmlCharRef",
    "access": null,
    "export": true,
    "importPath": "xmlcreate/lib/nodes/XmlCharRef.js",
    "importStyle": "XmlCharRef",
    "description": "Represents an XML character reference.\n\nAn XML character reference is structured as follows, where\n<code>{dec}</code> is the decimal representation code point corresponding to\na particular Unicode character:\n\n<code>&amp;#{num};</code>\n\nThe corresponding hexadecimal version is structured as follows, where\n<code>{hex}</code> is the hexadecimal representation code point corresponding\nto a particular Unicode character:\n\n<code>&amp;#x{hex};</code>\n\nUnicode characters outside of the Basic Multilingual Plane are represented\nusing a surrogate pair consisting of two character references.\n\nThe <code>{dec}</code> and <code>{hex}</code> values are defined by the\n<code>{char}</code> and <code>{hex}</code> properties of this node; the\nformer is the character to be represented while the latter indicates whether\nthe decimal or hexadecimal representation should be used.\n\nXmlCharRef nodes cannot have any children.",
    "lineNumber": 50,
    "interface": false,
    "extends": [
      "src/nodes/XmlNode.js~XmlNode"
    ]
  },
  {
    "__docId__": 30,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/nodes/XmlCharRef.js~XmlCharRef",
    "longname": "src/nodes/XmlCharRef.js~XmlCharRef#constructor",
    "access": null,
    "description": "Initializes a new instance of the {@link XmlCharRef} class.",
    "lineNumber": 59,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "char",
        "description": "The character to represent using the reference."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "hex",
        "description": "Whether to use the hexadecimal or decimal\n                       representation for the reference. If left\n                       undefined, decimal is the default."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 31,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "char",
    "memberof": "src/nodes/XmlCharRef.js~XmlCharRef",
    "longname": "src/nodes/XmlCharRef.js~XmlCharRef#char",
    "access": null,
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 32,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "hex",
    "memberof": "src/nodes/XmlCharRef.js~XmlCharRef",
    "longname": "src/nodes/XmlCharRef.js~XmlCharRef#hex",
    "access": null,
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 33,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "char",
    "memberof": "src/nodes/XmlCharRef.js~XmlCharRef",
    "longname": "src/nodes/XmlCharRef.js~XmlCharRef#char",
    "access": null,
    "description": "Gets the character to represent using the reference.",
    "lineNumber": 70,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} The character to represent using the reference."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The character to represent using the reference."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 34,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "char",
    "memberof": "src/nodes/XmlCharRef.js~XmlCharRef",
    "longname": "src/nodes/XmlCharRef.js~XmlCharRef#char",
    "access": null,
    "description": "Sets the character to represent using the reference.",
    "lineNumber": 79,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "char",
        "description": "The character to represent using the reference."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 35,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_char",
    "memberof": "src/nodes/XmlCharRef.js~XmlCharRef",
    "longname": "src/nodes/XmlCharRef.js~XmlCharRef#_char",
    "access": null,
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 36,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "hex",
    "memberof": "src/nodes/XmlCharRef.js~XmlCharRef",
    "longname": "src/nodes/XmlCharRef.js~XmlCharRef#hex",
    "access": null,
    "description": "Gets whether or not to use the hexadecimal or decimal representation for\nthe reference.",
    "lineNumber": 96,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} Whether or not to use the hexadecimal or decimal\n                   representation for the reference."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether or not to use the hexadecimal or decimal\n                   representation for the reference."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 37,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "hex",
    "memberof": "src/nodes/XmlCharRef.js~XmlCharRef",
    "longname": "src/nodes/XmlCharRef.js~XmlCharRef#hex",
    "access": null,
    "description": "Sets whether or not to use the hexadecimal or decimal representation for\nthe reference.",
    "lineNumber": 107,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "hex",
        "description": "Whether or not to use the hexadecimal or decimal\n                     representation for the reference."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 38,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_hex",
    "memberof": "src/nodes/XmlCharRef.js~XmlCharRef",
    "longname": "src/nodes/XmlCharRef.js~XmlCharRef#_hex",
    "access": null,
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 39,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "children",
    "memberof": "src/nodes/XmlCharRef.js~XmlCharRef",
    "longname": "src/nodes/XmlCharRef.js~XmlCharRef#children",
    "access": null,
    "description": "Throws an exception since {@link XmlCharRef} nodes cannot have any\nchildren.",
    "lineNumber": 118,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 40,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "insertChild",
    "memberof": "src/nodes/XmlCharRef.js~XmlCharRef",
    "longname": "src/nodes/XmlCharRef.js~XmlCharRef#insertChild",
    "access": null,
    "description": "Throws an exception since {@link XmlCharRef} nodes cannot have any\nchildren.",
    "lineNumber": 126,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 41,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeChild",
    "memberof": "src/nodes/XmlCharRef.js~XmlCharRef",
    "longname": "src/nodes/XmlCharRef.js~XmlCharRef#removeChild",
    "access": null,
    "description": "Throws an exception since {@link XmlCharRef} nodes cannot have any\nchildren.",
    "lineNumber": 134,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 42,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeChildAtIndex",
    "memberof": "src/nodes/XmlCharRef.js~XmlCharRef",
    "longname": "src/nodes/XmlCharRef.js~XmlCharRef#removeChildAtIndex",
    "access": null,
    "description": "Throws an exception since {@link XmlCharRef} nodes cannot have any\nchildren.",
    "lineNumber": 142,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 43,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toString",
    "memberof": "src/nodes/XmlCharRef.js~XmlCharRef",
    "longname": "src/nodes/XmlCharRef.js~XmlCharRef#toString",
    "access": null,
    "description": "Returns an XML string representation of this node.",
    "lineNumber": 154,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} An XML string representation of this node."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "StringOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "Formatting options for the string\n                                 representation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "An XML string representation of this node."
    },
    "generator": false
  },
  {
    "__docId__": 44,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/nodes/XmlComment.js",
    "memberof": null,
    "longname": "src/nodes/XmlComment.js",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "content": "/**\r\n * Copyright (C) 2016 Michael Kourlas\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\"use strict\";\r\n\r\nimport {typeCheck} from \"type-check\";\r\n\r\nimport * as validate from \"../utils/validate\";\r\n\r\nimport XmlNode from \"./XmlNode\";\r\n\r\n/**\r\n * Represents an XML comment.\r\n *\r\n * An XML character reference is structured as follows, where\r\n * <code>{content}</code> is the text of the comment.\r\n *\r\n * <code>&lt;!--{content}--></code>\r\n *\r\n * The <code>{content}</code> value is a property of this node.\r\n *\r\n * XmlComment nodes cannot have any children.\r\n */\r\nexport default class XmlComment extends XmlNode {\r\n    /**\r\n     * Initializes a new instance of the {@link XmlComment} class.\r\n     *\r\n     * @param {string} content The content of the comment.\r\n     */\r\n    constructor(content) {\r\n        super();\r\n        this.content = content;\r\n    }\r\n\r\n    /**\r\n     * Gets the content of the comment.\r\n     *\r\n     * @returns {string} The content of the comment.\r\n     */\r\n    get content() {\r\n        return this._content;\r\n    }\r\n\r\n    /**\r\n     * Sets the content of the comment.\r\n     *\r\n     * @param {string} content The content of the comment.\r\n     */\r\n    set content(content) {\r\n        if (!typeCheck(\"String\", content)) {\r\n            throw new TypeError(\"content should be a string\");\r\n        } else if (!validate.char(content)) {\r\n            throw new Error(\"content should not contain characters\" +\r\n                \" not allowed in XML\");\r\n        } else if (!/^([^-]|-[^-])*$/.test(content)) {\r\n            throw new Error(\"content should not contain the string '--' or\" +\r\n                \" end with '-'\");\r\n        }\r\n        this._content = content;\r\n    }\r\n\r\n    /**\r\n     * Throws an exception since {@link XmlComment} nodes cannot have any\r\n     * children.\r\n     */\r\n    children() {\r\n        throw new Error(\"XmlComment nodes cannot have children\");\r\n    }\r\n\r\n    /**\r\n     * Throws an exception since {@link XmlComment} nodes cannot have any\r\n     * children.\r\n     */\r\n    insertChild(node, index) {\r\n        throw new Error(\"XmlComment nodes cannot have children\");\r\n    }\r\n\r\n    /**\r\n     * Throws an exception since {@link XmlComment} nodes cannot have any\r\n     * children.\r\n     */\r\n    removeChild(node) {\r\n        throw new Error(\"XmlComment nodes cannot have children\");\r\n    }\r\n\r\n    /**\r\n     * Throws an exception since {@link XmlComment} nodes cannot have any\r\n     * children.\r\n     */\r\n    removeChildAtIndex(index) {\r\n        throw new Error(\"XmlComment nodes cannot have children\");\r\n    }\r\n\r\n    /**\r\n     * Returns an XML string representation of this node.\r\n     *\r\n     * @param {StringOptions} [options] Formatting options for the string\r\n     *                                  representation.\r\n     *\r\n     * @returns {string} An XML string representation of this node.\r\n     */\r\n    toString(options) {\r\n        return \"<!--\" + this.content + \"-->\";\r\n    }\r\n}\r\n"
  },
  {
    "__docId__": 45,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "XmlComment",
    "memberof": "src/nodes/XmlComment.js",
    "longname": "src/nodes/XmlComment.js~XmlComment",
    "access": null,
    "export": true,
    "importPath": "xmlcreate/lib/nodes/XmlComment.js",
    "importStyle": "XmlComment",
    "description": "Represents an XML comment.\n\nAn XML character reference is structured as follows, where\n<code>{content}</code> is the text of the comment.\n\n<code>&lt;!--{content}--></code>\n\nThe <code>{content}</code> value is a property of this node.\n\nXmlComment nodes cannot have any children.",
    "lineNumber": 37,
    "interface": false,
    "extends": [
      "src/nodes/XmlNode.js~XmlNode"
    ]
  },
  {
    "__docId__": 46,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/nodes/XmlComment.js~XmlComment",
    "longname": "src/nodes/XmlComment.js~XmlComment#constructor",
    "access": null,
    "description": "Initializes a new instance of the {@link XmlComment} class.",
    "lineNumber": 43,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "content",
        "description": "The content of the comment."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 47,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "content",
    "memberof": "src/nodes/XmlComment.js~XmlComment",
    "longname": "src/nodes/XmlComment.js~XmlComment#content",
    "access": null,
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 48,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "content",
    "memberof": "src/nodes/XmlComment.js~XmlComment",
    "longname": "src/nodes/XmlComment.js~XmlComment#content",
    "access": null,
    "description": "Gets the content of the comment.",
    "lineNumber": 53,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} The content of the comment."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The content of the comment."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 49,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "content",
    "memberof": "src/nodes/XmlComment.js~XmlComment",
    "longname": "src/nodes/XmlComment.js~XmlComment#content",
    "access": null,
    "description": "Sets the content of the comment.",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "content",
        "description": "The content of the comment."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 50,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_content",
    "memberof": "src/nodes/XmlComment.js~XmlComment",
    "longname": "src/nodes/XmlComment.js~XmlComment#_content",
    "access": null,
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 51,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "children",
    "memberof": "src/nodes/XmlComment.js~XmlComment",
    "longname": "src/nodes/XmlComment.js~XmlComment#children",
    "access": null,
    "description": "Throws an exception since {@link XmlComment} nodes cannot have any\nchildren.",
    "lineNumber": 79,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 52,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "insertChild",
    "memberof": "src/nodes/XmlComment.js~XmlComment",
    "longname": "src/nodes/XmlComment.js~XmlComment#insertChild",
    "access": null,
    "description": "Throws an exception since {@link XmlComment} nodes cannot have any\nchildren.",
    "lineNumber": 87,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 53,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeChild",
    "memberof": "src/nodes/XmlComment.js~XmlComment",
    "longname": "src/nodes/XmlComment.js~XmlComment#removeChild",
    "access": null,
    "description": "Throws an exception since {@link XmlComment} nodes cannot have any\nchildren.",
    "lineNumber": 95,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 54,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeChildAtIndex",
    "memberof": "src/nodes/XmlComment.js~XmlComment",
    "longname": "src/nodes/XmlComment.js~XmlComment#removeChildAtIndex",
    "access": null,
    "description": "Throws an exception since {@link XmlComment} nodes cannot have any\nchildren.",
    "lineNumber": 103,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 55,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toString",
    "memberof": "src/nodes/XmlComment.js~XmlComment",
    "longname": "src/nodes/XmlComment.js~XmlComment#toString",
    "access": null,
    "description": "Returns an XML string representation of this node.",
    "lineNumber": 115,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} An XML string representation of this node."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "StringOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "Formatting options for the string\n                                 representation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "An XML string representation of this node."
    },
    "generator": false
  },
  {
    "__docId__": 56,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/nodes/XmlDecl.js",
    "memberof": null,
    "longname": "src/nodes/XmlDecl.js",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "content": "/**\r\n * Copyright (C) 2016 Michael Kourlas\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\"use strict\";\r\n\r\nimport {typeCheck} from \"type-check\";\r\n\r\nimport * as declarationOptions from \"../options/declaration\";\r\nimport * as stringOptions from \"../options/string\";\r\n\r\nimport XmlNode from \"./XmlNode\";\r\n\r\n/**\r\n * Represents an XML declaration.\r\n *\r\n * An XML declaration is structured as follows, where <code>{version}</code> is\r\n * the XML version, <code>{encoding}</code> is the encoding of the document,\r\n * and <code>{standalone}</code> is either \"yes\" or \"no\", depending on whether\r\n * the document may contain external markup declarations:\r\n *\r\n * <code>&lt;?xml version=\"{version}\" encoding=\"{encoding}\"\r\n * standalone=\"{standalone}\"?&gt;</code>\r\n *\r\n * The <code>{version}</code>, <code>{encoding}</code>, and\r\n * <code>{standalone}</code> values are properties of this node.\r\n *\r\n * XmlDecl nodes cannot have any children.\r\n */\r\nexport default class XmlDecl extends XmlNode {\r\n    /**\r\n     * Initializes a new instance of the {@link XmlDecl} class.\r\n     *\r\n     * @param {DeclarationOptions} [options] The options associated with the XML\r\n     *                                       declaration.\r\n     */\r\n    constructor(options = {}) {\r\n        super();\r\n        declarationOptions.validate(options);\r\n        this.encoding = options.encoding;\r\n        this.standalone = options.standalone;\r\n        this.version = options.version;\r\n    }\r\n\r\n    /**\r\n     * Gets the XML encoding to be included in the declaration.\r\n     *\r\n     * @returns {string|undefined} The XML encoding to be included in the\r\n     *                             declaration.\r\n     */\r\n    get encoding() {\r\n        return this._encoding;\r\n    }\r\n\r\n    /**\r\n     * Sets the XML encoding to be included in the declaration.\r\n     *\r\n     * @param encoding {string|undefined} The XML encoding to be included in\r\n     *                                    the declaration. This value must be a\r\n     *                                    valid encoding. If left undefined, no\r\n     *                                    encoding is included.\r\n     */\r\n    set encoding(encoding) {\r\n        if (typeCheck(\"String\", encoding)) {\r\n            if (!/^[A-Za-z][A-Za-z0-9._-]*$/.test(encoding)) {\r\n                throw new Error(\"encoding should be a valid XML encoding\");\r\n            }\r\n        } else if (!typeCheck(\"Undefined\", encoding)) {\r\n            throw new TypeError(\"name should be a string or undefined\");\r\n        }\r\n        this._encoding = encoding;\r\n    }\r\n\r\n    /**\r\n     * Gets the XML standalone attribute to be included in the declaration.\r\n     *\r\n     * @returns {string|undefined} The XML standalone attribute to be included\r\n     *                             in the declaration.\r\n     */\r\n    get standalone() {\r\n        return this._standalone;\r\n    }\r\n\r\n    /**\r\n     * Sets the XML standalone attribute to be included in the declaration.\r\n     *\r\n     * @param {string|undefined} standalone The XML standalone attribute to be\r\n     *                                      included. This value must be \"yes\"\r\n     *                                      or \"no\". If left undefined, no\r\n     *                                      standalone attribute is included.\r\n     */\r\n    set standalone(standalone) {\r\n        if (typeCheck(\"String\", standalone)) {\r\n            if (!/^(yes|no)$/.test(standalone)) {\r\n                throw new Error(\"standalone should be either the string\" +\r\n                    \" 'yes' or the string 'no'\");\r\n            }\r\n        } else if (!typeCheck(\"Undefined\", standalone)) {\r\n            throw new TypeError(\"standalone should be a string or undefined\");\r\n        }\r\n        this._standalone = standalone;\r\n    }\r\n\r\n    /**\r\n     * Gets the XML version to be included in the declaration.\r\n     *\r\n     * @returns {string} The XML version to tbe included in the declaration.\r\n     */\r\n    get version() {\r\n        return this._version;\r\n    }\r\n\r\n    /**\r\n     * Sets the XML version to be included in the declaration.\r\n     *\r\n     * @param {string} version The XML version to be included in the\r\n     *                         declaration. This value must be a valid XML\r\n     *                         version number. If left undefined, the default\r\n     *                         version is \"1.0\".\r\n     */\r\n    set version(version) {\r\n        if (!typeCheck(\"String\", version)) {\r\n            throw new TypeError(\"version should be a string\");\r\n        } else if (!/^1\\.[0-9]+$/.test(version)) {\r\n            throw new Error(\"version should be a valid XML version\");\r\n        }\r\n        this._version = version;\r\n    }\r\n\r\n    /**\r\n     * Throws an exception since {@link XmlDecl} nodes cannot have any\r\n     * children.\r\n     */\r\n    children() {\r\n        throw new Error(\"XmlDecl nodes cannot have children\");\r\n    }\r\n\r\n    /**\r\n     * Throws an exception since {@link XmlDecl} nodes cannot have any\r\n     * children.\r\n     */\r\n    insertChild(node, index) {\r\n        throw new Error(\"XmlDecl nodes cannot have children\");\r\n    }\r\n\r\n    /**\r\n     * Throws an exception since {@link XmlDecl} nodes cannot have any\r\n     * children.\r\n     */\r\n    removeChild(node) {\r\n        throw new Error(\"XmlDecl nodes cannot have children\");\r\n    }\r\n\r\n    /**\r\n     * Throws an exception since {@link XmlDecl} nodes cannot have any\r\n     * children.\r\n     */\r\n    removeChildAtIndex(index) {\r\n        throw new Error(\"XmlDecl nodes cannot have children\");\r\n    }\r\n\r\n    /**\r\n     * Returns an XML string representation of this node.\r\n     *\r\n     * @param {StringOptions} [options] Formatting options for the string\r\n     *                                  representation.\r\n     *\r\n     * @returns {string} An XML string representation of this node.\r\n     */\r\n    toString(options = {}) {\r\n        stringOptions.validate(options);\r\n\r\n        let quote = options.doubleQuotes ? '\"' : \"'\";\r\n        let str = \"<?xml version=\" + quote + this.version + quote;\r\n        if (typeCheck(\"String\", this.encoding)) {\r\n            str += \" encoding=\" + quote + this.encoding + quote;\r\n        }\r\n        if (typeCheck(\"String\", this.standalone)) {\r\n            str += \" standalone=\" + quote + this.standalone + quote;\r\n        }\r\n        str += \"?>\";\r\n        return str;\r\n    }\r\n}\r\n"
  },
  {
    "__docId__": 57,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "XmlDecl",
    "memberof": "src/nodes/XmlDecl.js",
    "longname": "src/nodes/XmlDecl.js~XmlDecl",
    "access": null,
    "export": true,
    "importPath": "xmlcreate/lib/nodes/XmlDecl.js",
    "importStyle": "XmlDecl",
    "description": "Represents an XML declaration.\n\nAn XML declaration is structured as follows, where <code>{version}</code> is\nthe XML version, <code>{encoding}</code> is the encoding of the document,\nand <code>{standalone}</code> is either \"yes\" or \"no\", depending on whether\nthe document may contain external markup declarations:\n\n<code>&lt;?xml version=\"{version}\" encoding=\"{encoding}\"\nstandalone=\"{standalone}\"?&gt;</code>\n\nThe <code>{version}</code>, <code>{encoding}</code>, and\n<code>{standalone}</code> values are properties of this node.\n\nXmlDecl nodes cannot have any children.",
    "lineNumber": 42,
    "interface": false,
    "extends": [
      "src/nodes/XmlNode.js~XmlNode"
    ]
  },
  {
    "__docId__": 58,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/nodes/XmlDecl.js~XmlDecl",
    "longname": "src/nodes/XmlDecl.js~XmlDecl#constructor",
    "access": null,
    "description": "Initializes a new instance of the {@link XmlDecl} class.",
    "lineNumber": 49,
    "params": [
      {
        "nullable": null,
        "types": [
          "DeclarationOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "The options associated with the XML\n                                      declaration."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 59,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "encoding",
    "memberof": "src/nodes/XmlDecl.js~XmlDecl",
    "longname": "src/nodes/XmlDecl.js~XmlDecl#encoding",
    "access": null,
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "standalone",
    "memberof": "src/nodes/XmlDecl.js~XmlDecl",
    "longname": "src/nodes/XmlDecl.js~XmlDecl#standalone",
    "access": null,
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "version",
    "memberof": "src/nodes/XmlDecl.js~XmlDecl",
    "longname": "src/nodes/XmlDecl.js~XmlDecl#version",
    "access": null,
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "encoding",
    "memberof": "src/nodes/XmlDecl.js~XmlDecl",
    "longname": "src/nodes/XmlDecl.js~XmlDecl#encoding",
    "access": null,
    "description": "Gets the XML encoding to be included in the declaration.",
    "lineNumber": 63,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string|undefined} The XML encoding to be included in the\n                            declaration."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string",
        "undefined"
      ],
      "spread": false,
      "description": "The XML encoding to be included in the\n                            declaration."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 63,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "encoding",
    "memberof": "src/nodes/XmlDecl.js~XmlDecl",
    "longname": "src/nodes/XmlDecl.js~XmlDecl#encoding",
    "access": null,
    "description": "Sets the XML encoding to be included in the declaration.",
    "lineNumber": 75,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "encoding",
        "description": "{string|undefined} The XML encoding to be included in\n                                   the declaration. This value must be a\n                                   valid encoding. If left undefined, no\n                                   encoding is included."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 64,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_encoding",
    "memberof": "src/nodes/XmlDecl.js~XmlDecl",
    "longname": "src/nodes/XmlDecl.js~XmlDecl#_encoding",
    "access": null,
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "standalone",
    "memberof": "src/nodes/XmlDecl.js~XmlDecl",
    "longname": "src/nodes/XmlDecl.js~XmlDecl#standalone",
    "access": null,
    "description": "Gets the XML standalone attribute to be included in the declaration.",
    "lineNumber": 92,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string|undefined} The XML standalone attribute to be included\n                            in the declaration."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string",
        "undefined"
      ],
      "spread": false,
      "description": "The XML standalone attribute to be included\n                            in the declaration."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 66,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "standalone",
    "memberof": "src/nodes/XmlDecl.js~XmlDecl",
    "longname": "src/nodes/XmlDecl.js~XmlDecl#standalone",
    "access": null,
    "description": "Sets the XML standalone attribute to be included in the declaration.",
    "lineNumber": 104,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "standalone",
        "description": "The XML standalone attribute to be\n                                     included. This value must be \"yes\"\n                                     or \"no\". If left undefined, no\n                                     standalone attribute is included."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 67,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_standalone",
    "memberof": "src/nodes/XmlDecl.js~XmlDecl",
    "longname": "src/nodes/XmlDecl.js~XmlDecl#_standalone",
    "access": null,
    "description": null,
    "lineNumber": 113,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "version",
    "memberof": "src/nodes/XmlDecl.js~XmlDecl",
    "longname": "src/nodes/XmlDecl.js~XmlDecl#version",
    "access": null,
    "description": "Gets the XML version to be included in the declaration.",
    "lineNumber": 121,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} The XML version to tbe included in the declaration."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The XML version to tbe included in the declaration."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 69,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "version",
    "memberof": "src/nodes/XmlDecl.js~XmlDecl",
    "longname": "src/nodes/XmlDecl.js~XmlDecl#version",
    "access": null,
    "description": "Sets the XML version to be included in the declaration.",
    "lineNumber": 133,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "version",
        "description": "The XML version to be included in the\n                        declaration. This value must be a valid XML\n                        version number. If left undefined, the default\n                        version is \"1.0\"."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 70,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_version",
    "memberof": "src/nodes/XmlDecl.js~XmlDecl",
    "longname": "src/nodes/XmlDecl.js~XmlDecl#_version",
    "access": null,
    "description": null,
    "lineNumber": 139,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "children",
    "memberof": "src/nodes/XmlDecl.js~XmlDecl",
    "longname": "src/nodes/XmlDecl.js~XmlDecl#children",
    "access": null,
    "description": "Throws an exception since {@link XmlDecl} nodes cannot have any\nchildren.",
    "lineNumber": 146,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 72,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "insertChild",
    "memberof": "src/nodes/XmlDecl.js~XmlDecl",
    "longname": "src/nodes/XmlDecl.js~XmlDecl#insertChild",
    "access": null,
    "description": "Throws an exception since {@link XmlDecl} nodes cannot have any\nchildren.",
    "lineNumber": 154,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 73,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeChild",
    "memberof": "src/nodes/XmlDecl.js~XmlDecl",
    "longname": "src/nodes/XmlDecl.js~XmlDecl#removeChild",
    "access": null,
    "description": "Throws an exception since {@link XmlDecl} nodes cannot have any\nchildren.",
    "lineNumber": 162,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 74,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeChildAtIndex",
    "memberof": "src/nodes/XmlDecl.js~XmlDecl",
    "longname": "src/nodes/XmlDecl.js~XmlDecl#removeChildAtIndex",
    "access": null,
    "description": "Throws an exception since {@link XmlDecl} nodes cannot have any\nchildren.",
    "lineNumber": 170,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 75,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toString",
    "memberof": "src/nodes/XmlDecl.js~XmlDecl",
    "longname": "src/nodes/XmlDecl.js~XmlDecl#toString",
    "access": null,
    "description": "Returns an XML string representation of this node.",
    "lineNumber": 182,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} An XML string representation of this node."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "StringOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "Formatting options for the string\n                                 representation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "An XML string representation of this node."
    },
    "generator": false
  },
  {
    "__docId__": 76,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/nodes/XmlDocument.js",
    "memberof": null,
    "longname": "src/nodes/XmlDocument.js",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "content": "/**\r\n * Copyright (C) 2016 Michael Kourlas\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\"use strict\";\r\n\r\nimport {typeCheck} from \"type-check\";\r\n\r\nimport * as stringOptions from \"../options/string\";\r\n\r\nimport XmlComment from \"./XmlComment\";\r\nimport XmlDecl from \"./XmlDecl\";\r\nimport XmlDtd from \"./XmlDtd\";\r\nimport XmlElement from \"./XmlElement\";\r\nimport XmlNode from \"./XmlNode\";\r\nimport XmlProcInst from \"./XmlProcInst\";\r\n\r\n/**\r\n * Represents an XML document.\r\n *\r\n * A sample XML document is structured as follows:\r\n * <code><pre>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\r\n * &lt;DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\r\n *                      \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\r\n * &lt;html&gt;\r\n *     &lt;head&gt;\r\n *         &lt;title&gt;My page title&lt;/title&gt;\r\n *     &lt;/head&gt;\r\n *     &lt;body&gt;\r\n *         &lt;h1&gt;Welcome!&lt;/h1&gt;\r\n *         &lt;p&gt;I hope you enjoy visiting my website.&lt;/p&gt;\r\n *         &lt;img src=\"picture.png\"/&gt;\r\n *     &lt;/body&gt;\r\n * &lt;/html&gt;</pre></code>\r\n *\r\n * Each component of the document, such as the XML declaration, document type\r\n * definition, and root element, are children of this node.\r\n *\r\n * XmlDocument nodes must have exactly one {@link XmlElement} child, which is\r\n * the document's root element.\r\n *\r\n * XmlDocument nodes can have exactly one {@link XmlDecl} and {@link XmlDtd}\r\n * child in that order, so long as they precede the {@link XmlElement} node.\r\n *\r\n * XmlDocument nodes can have an unlimited number of {@link XmlComment} or\r\n * {@link XmlProcInst} nodes, so long as they follow the {@link XmlDecl} node,\r\n * if one exists.\r\n */\r\nexport default class XmlDocument extends XmlNode {\r\n    /**\r\n     * Initializes a new instance of the {@link XmlDocument} class.\r\n     *\r\n     * @param {string} root The name of the root element.\r\n     */\r\n    constructor(root) {\r\n        super();\r\n        super.insertChild(new XmlElement(root));\r\n    }\r\n\r\n    /**\r\n     * Inserts a new comment at the specified index. If no index is specified,\r\n     * the node is inserted at the end of this node's children.\r\n     *\r\n     * @param {string} content The data of the comment.\r\n     * @param {number} [index] The index at which the node should be inserted.\r\n     *                         If no index is specified, the node is inserted\r\n     *                         at the end of this node's children.\r\n     *\r\n     * @returns {XmlComment} The newly created element.\r\n     */\r\n    comment(content, index) {\r\n        let comment = new XmlComment(content);\r\n        this.insertChild(comment, index);\r\n        return comment;\r\n    }\r\n\r\n    /**\r\n     * Inserts a new XML declaration at the beginning of this node's children.\r\n     *\r\n     * @param {DeclarationOptions} [options] The options associated with the\r\n     *                                       XML declaration.\r\n     *\r\n     * @returns {XmlDecl} The newly created XML declaration.\r\n     */\r\n    decl(options) {\r\n        let declaration = new XmlDecl(options);\r\n        this.insertChild(declaration, 0);\r\n        return declaration;\r\n    }\r\n\r\n    /**\r\n     * Inserts a new XML document type definition. Unless a different index is\r\n     * specified, the node is inserted immediately after the XML declaration\r\n     * if one exists, or at the beginning of this node's children if one does\r\n     * not.\r\n     *\r\n     * @param {string} name    The name of the DTD.\r\n     * @param {string} [sysId] The system identifier of the DTD, excluding\r\n     *                         quotation marks.\r\n     * @param {string} [pubId] The public identifier of the DTD, excluding\r\n     *                         quotation marks. If a public identifier is\r\n     *                         provided, a system identifier must be provided\r\n     *                         as well.\r\n     * @param {number} [index] The index at which the node should be inserted.\r\n     *                         If no index is specified, the node is inserted\r\n     *                         immediately after the XML declaration if one\r\n     *                         exists, or at the beginning of this node's\r\n     *                         children if one does not.\r\n     *\r\n     * @returns {XmlDtd} The newly created XML document type definition.\r\n     */\r\n    dtd(name, sysId, pubId, index) {\r\n        let dtd = new XmlDtd(name, sysId, pubId);\r\n        if (typeCheck(\"Undefined\", index)) {\r\n            if (this._children[0] instanceof XmlDecl) {\r\n                index = 1;\r\n            } else {\r\n                index = 0;\r\n            }\r\n        }\r\n        this.insertChild(dtd, index);\r\n        return dtd;\r\n    }\r\n\r\n    /**\r\n     * Inserts the specified node into this node's children at the specified\r\n     * index. The node is not inserted if it is already present. If this node\r\n     * already has a parent, it is removed from that parent.\r\n     *\r\n     * Only {@link XmlComment}, {@link XmlDecl}, {@link XmlDtd}, or\r\n     * {@link XmlProcInst} nodes can be inserted. Furthermore, {@link XmlDecl}\r\n     * and {@link XmlDtd} nodes must be inserted in that order and must\r\n     * precede the {@link XmlElement} node. In addition, {@link XmlComment} or\r\n     * {@link XmlProcInst} nodes must follow the {@link XmlDecl} node.\r\n     *\r\n     * @param {XmlNode} node   The node to insert.\r\n     * @param {number} [index] The index at which to insert the node. Nodes at\r\n     *                         or after the index are shifted to the right. If\r\n     *                         no index is specified, the node is inserted at\r\n     *                         the end.\r\n     *\r\n     * @returns {XmlNode} The node inserted into this node's children, or\r\n     *                    undefined if no node was inserted.\r\n     */\r\n    insertChild(node, index = this._children.length) {\r\n        if (!(node instanceof XmlComment || node instanceof XmlDecl ||\r\n            node instanceof XmlDtd || node instanceof XmlProcInst)) {\r\n            throw new TypeError(\"node should be an instance of\" +\r\n                \" XmlComment, XmlDecl, XmlDtd, or XmlProcInst\");\r\n        }\r\n\r\n        if (node instanceof XmlComment || node instanceof XmlProcInst) {\r\n            if (this._children[0] instanceof XmlDecl) {\r\n                if (index === 0) {\r\n                    throw new Error(\"XmlComment or XmlProcInst node should be\" +\r\n                        \" inserted after the XmlDecl node\");\r\n                }\r\n            }\r\n        } else if (node instanceof XmlDecl) {\r\n            if (this._children[0] instanceof XmlDecl) {\r\n                throw new Error(\"XmlDocument node should only contain one\" +\r\n                    \" XmlDecl node\");\r\n            }\r\n            if (index !== 0) {\r\n                throw new Error(\"XmlDecl node should be inserted at the\" +\r\n                    \" beginning of an XmlDocument node\");\r\n            }\r\n        } else if (node instanceof XmlDtd) {\r\n            if (this._children[0] instanceof XmlDecl) {\r\n                if (index === 0) {\r\n                    throw new Error(\"XmlDtd node should be inserted after\" +\r\n                        \" the XmlDecl node\");\r\n                }\r\n            }\r\n            for (let i = 0; i < index && i < this._children.length; i++) {\r\n                if (this._children[i] instanceof XmlElement) {\r\n                    throw new Error(\"XmlDtd node should be inserted before\" +\r\n                        \" the XmlElement node\");\r\n                }\r\n            }\r\n            for (let child of this._children) {\r\n                if (child instanceof XmlDtd) {\r\n                    throw new Error(\"XmlDocument node should only contain\" +\r\n                        \" one XmlDtd node\");\r\n                }\r\n            }\r\n        }\r\n        return super.insertChild(node, index);\r\n    }\r\n\r\n    /**\r\n     * Inserts a new processing instruction at the specified index. If no index\r\n     * is specified, the node is inserted at the end of this node's children.\r\n     *\r\n     * @param {string} target    The target of the processing instruction.\r\n     * @param {string} [content] The data of the processing instruction, or\r\n     *                           undefined if there is no target.\r\n     * @param {number} [index]   The index at which the node should be inserted.\r\n     *                           If no index is specified, the node is inserted\r\n     *                           at the end of this node's children.\r\n     *\r\n     * @returns {XmlProcInst} The newly created processing instruction.\r\n     */\r\n    procInst(target, content, index) {\r\n        let procInst = new XmlProcInst(target, content);\r\n        this.insertChild(procInst, index);\r\n        return procInst;\r\n    }\r\n\r\n    /**\r\n     * Removes the specified node from this node's children.\r\n     *\r\n     * Note that {@link XmlElement} nodes cannot be removed from this node;\r\n     * attempts to do so will result in an exception being thrown.\r\n     *\r\n     * @param {XmlNode} node The node to remove.\r\n     *\r\n     * @returns {boolean} Whether a node was removed.\r\n     */\r\n    removeChild(node) {\r\n        if (node instanceof XmlElement) {\r\n            throw new Error(\"XmlElement nodes cannot be removed from\" +\r\n                \" XmlDocument nodes\");\r\n        }\r\n        return super.removeChild(node);\r\n    }\r\n\r\n    /**\r\n     * Removes the node at the specified index from this node's children.\r\n     *\r\n     * Note that {@link XmlElement} nodes cannot be removed from this node;\r\n     * attempts to do so will result in an exception being thrown.\r\n     *\r\n     * @param {number} index The index at which the node to be removed is\r\n     *                       located.\r\n     *\r\n     * @returns {XmlNode} The node that was removed, or undefined if no node\r\n     *                    was removed.\r\n     */\r\n    removeChildAtIndex(index) {\r\n        if (this._children[index] instanceof XmlElement) {\r\n            throw new Error(\"XmlElement nodes cannot be removed from\" +\r\n                \" XmlDocument nodes\");\r\n        }\r\n        return super.removeChildAtIndex(index);\r\n    }\r\n\r\n    /**\r\n     * Returns the root element of this document.\r\n     *\r\n     * @returns {XmlNode} The root element of this document.\r\n     */\r\n    root() {\r\n        for (let node of this._children) {\r\n            if (node instanceof XmlElement) {\r\n                return node;\r\n            }\r\n        }\r\n        throw new Error(\"XmlDocument does not contain a root node\");\r\n    }\r\n\r\n    /**\r\n     * Returns an XML string representation of this node.\r\n     *\r\n     * @param {StringOptions} [options] Formatting options for the string\r\n     *                                  representation.\r\n     *\r\n     * @returns {string} An XML string representation of this node.\r\n     */\r\n    toString(options = {}) {\r\n        stringOptions.validate(options);\r\n\r\n        let str = \"\";\r\n        for (let node of this._children) {\r\n            str += node.toString(options);\r\n            if (options.pretty) {\r\n                str += options.newline;\r\n            }\r\n        }\r\n\r\n        let len = str.length - options.newline.length;\r\n        if (str.substr(len) === options.newline) {\r\n            str = str.substr(0, len);\r\n        }\r\n\r\n        return str;\r\n    }\r\n}\r\n"
  },
  {
    "__docId__": 77,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "XmlDocument",
    "memberof": "src/nodes/XmlDocument.js",
    "longname": "src/nodes/XmlDocument.js~XmlDocument",
    "access": null,
    "export": true,
    "importPath": "xmlcreate/lib/nodes/XmlDocument.js",
    "importStyle": "XmlDocument",
    "description": "Represents an XML document.\n\nA sample XML document is structured as follows:\n<code><pre>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n                     \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;My page title&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;Welcome!&lt;/h1&gt;\n        &lt;p&gt;I hope you enjoy visiting my website.&lt;/p&gt;\n        &lt;img src=\"picture.png\"/&gt;\n    &lt;/body&gt;\n&lt;/html&gt;</pre></code>\n\nEach component of the document, such as the XML declaration, document type\ndefinition, and root element, are children of this node.\n\nXmlDocument nodes must have exactly one {@link XmlElement} child, which is\nthe document's root element.\n\nXmlDocument nodes can have exactly one {@link XmlDecl} and {@link XmlDtd}\nchild in that order, so long as they precede the {@link XmlElement} node.\n\nXmlDocument nodes can have an unlimited number of {@link XmlComment} or\n{@link XmlProcInst} nodes, so long as they follow the {@link XmlDecl} node,\nif one exists.",
    "lineNumber": 61,
    "interface": false,
    "extends": [
      "src/nodes/XmlNode.js~XmlNode"
    ]
  },
  {
    "__docId__": 78,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/nodes/XmlDocument.js~XmlDocument",
    "longname": "src/nodes/XmlDocument.js~XmlDocument#constructor",
    "access": null,
    "description": "Initializes a new instance of the {@link XmlDocument} class.",
    "lineNumber": 67,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "root",
        "description": "The name of the root element."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 79,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "comment",
    "memberof": "src/nodes/XmlDocument.js~XmlDocument",
    "longname": "src/nodes/XmlDocument.js~XmlDocument#comment",
    "access": null,
    "description": "Inserts a new comment at the specified index. If no index is specified,\nthe node is inserted at the end of this node's children.",
    "lineNumber": 83,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{XmlComment} The newly created element."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "content",
        "description": "The data of the comment."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "index",
        "description": "The index at which the node should be inserted.\n                        If no index is specified, the node is inserted\n                        at the end of this node's children."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "XmlComment"
      ],
      "spread": false,
      "description": "The newly created element."
    },
    "generator": false
  },
  {
    "__docId__": 80,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "decl",
    "memberof": "src/nodes/XmlDocument.js~XmlDocument",
    "longname": "src/nodes/XmlDocument.js~XmlDocument#decl",
    "access": null,
    "description": "Inserts a new XML declaration at the beginning of this node's children.",
    "lineNumber": 97,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{XmlDecl} The newly created XML declaration."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DeclarationOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "The options associated with the\n                                      XML declaration."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "XmlDecl"
      ],
      "spread": false,
      "description": "The newly created XML declaration."
    },
    "generator": false
  },
  {
    "__docId__": 81,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "dtd",
    "memberof": "src/nodes/XmlDocument.js~XmlDocument",
    "longname": "src/nodes/XmlDocument.js~XmlDocument#dtd",
    "access": null,
    "description": "Inserts a new XML document type definition. Unless a different index is\nspecified, the node is inserted immediately after the XML declaration\nif one exists, or at the beginning of this node's children if one does\nnot.",
    "lineNumber": 124,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{XmlDtd} The newly created XML document type definition."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the DTD."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "sysId",
        "description": "The system identifier of the DTD, excluding\n                        quotation marks."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "pubId",
        "description": "The public identifier of the DTD, excluding\n                        quotation marks. If a public identifier is\n                        provided, a system identifier must be provided\n                        as well."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "index",
        "description": "The index at which the node should be inserted.\n                        If no index is specified, the node is inserted\n                        immediately after the XML declaration if one\n                        exists, or at the beginning of this node's\n                        children if one does not."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "XmlDtd"
      ],
      "spread": false,
      "description": "The newly created XML document type definition."
    },
    "generator": false
  },
  {
    "__docId__": 82,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "insertChild",
    "memberof": "src/nodes/XmlDocument.js~XmlDocument",
    "longname": "src/nodes/XmlDocument.js~XmlDocument#insertChild",
    "access": null,
    "description": "Inserts the specified node into this node's children at the specified\nindex. The node is not inserted if it is already present. If this node\nalready has a parent, it is removed from that parent.\n\nOnly {@link XmlComment}, {@link XmlDecl}, {@link XmlDtd}, or\n{@link XmlProcInst} nodes can be inserted. Furthermore, {@link XmlDecl}\nand {@link XmlDtd} nodes must be inserted in that order and must\nprecede the {@link XmlElement} node. In addition, {@link XmlComment} or\n{@link XmlProcInst} nodes must follow the {@link XmlDecl} node.",
    "lineNumber": 157,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{XmlNode} The node inserted into this node's children, or\n                   undefined if no node was inserted."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "XmlNode"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "The node to insert."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "index",
        "description": "The index at which to insert the node. Nodes at\n                        or after the index are shifted to the right. If\n                        no index is specified, the node is inserted at\n                        the end."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "XmlNode"
      ],
      "spread": false,
      "description": "The node inserted into this node's children, or\n                   undefined if no node was inserted."
    },
    "generator": false
  },
  {
    "__docId__": 83,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "procInst",
    "memberof": "src/nodes/XmlDocument.js~XmlDocument",
    "longname": "src/nodes/XmlDocument.js~XmlDocument#procInst",
    "access": null,
    "description": "Inserts a new processing instruction at the specified index. If no index\nis specified, the node is inserted at the end of this node's children.",
    "lineNumber": 216,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{XmlProcInst} The newly created processing instruction."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target of the processing instruction."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "content",
        "description": "The data of the processing instruction, or\n                          undefined if there is no target."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "index",
        "description": "The index at which the node should be inserted.\n                          If no index is specified, the node is inserted\n                          at the end of this node's children."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "XmlProcInst"
      ],
      "spread": false,
      "description": "The newly created processing instruction."
    },
    "generator": false
  },
  {
    "__docId__": 84,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeChild",
    "memberof": "src/nodes/XmlDocument.js~XmlDocument",
    "longname": "src/nodes/XmlDocument.js~XmlDocument#removeChild",
    "access": null,
    "description": "Removes the specified node from this node's children.\n\nNote that {@link XmlElement} nodes cannot be removed from this node;\nattempts to do so will result in an exception being thrown.",
    "lineNumber": 232,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} Whether a node was removed."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "XmlNode"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "The node to remove."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether a node was removed."
    },
    "generator": false
  },
  {
    "__docId__": 85,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeChildAtIndex",
    "memberof": "src/nodes/XmlDocument.js~XmlDocument",
    "longname": "src/nodes/XmlDocument.js~XmlDocument#removeChildAtIndex",
    "access": null,
    "description": "Removes the node at the specified index from this node's children.\n\nNote that {@link XmlElement} nodes cannot be removed from this node;\nattempts to do so will result in an exception being thrown.",
    "lineNumber": 252,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{XmlNode} The node that was removed, or undefined if no node\n                   was removed."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "The index at which the node to be removed is\n                      located."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "XmlNode"
      ],
      "spread": false,
      "description": "The node that was removed, or undefined if no node\n                   was removed."
    },
    "generator": false
  },
  {
    "__docId__": 86,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "root",
    "memberof": "src/nodes/XmlDocument.js~XmlDocument",
    "longname": "src/nodes/XmlDocument.js~XmlDocument#root",
    "access": null,
    "description": "Returns the root element of this document.",
    "lineNumber": 265,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{XmlNode} The root element of this document."
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "XmlNode"
      ],
      "spread": false,
      "description": "The root element of this document."
    },
    "generator": false
  },
  {
    "__docId__": 87,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toString",
    "memberof": "src/nodes/XmlDocument.js~XmlDocument",
    "longname": "src/nodes/XmlDocument.js~XmlDocument#toString",
    "access": null,
    "description": "Returns an XML string representation of this node.",
    "lineNumber": 282,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} An XML string representation of this node."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "StringOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "Formatting options for the string\n                                 representation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "An XML string representation of this node."
    },
    "generator": false
  },
  {
    "__docId__": 88,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/nodes/XmlDtd.js",
    "memberof": null,
    "longname": "src/nodes/XmlDtd.js",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "content": "/**\r\n * Copyright (C) 2016 Michael Kourlas\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\"use strict\";\r\n\r\nimport {typeCheck} from \"type-check\";\r\n\r\nimport * as stringOptions from \"../options/string\";\r\nimport * as validate from \"../utils/validate\";\r\n\r\nimport XmlComment from \"./XmlComment\";\r\nimport XmlDtdAttlist from \"./XmlDtdAttlist\";\r\nimport XmlDtdElement from \"./XmlDtdElement\";\r\nimport XmlDtdEntity from \"./XmlDtdEntity\";\r\nimport XmlDtdNotation from \"./XmlDtdNotation\";\r\nimport XmlDtdParamEntityRef from \"./XmlDtdParamEntityRef\";\r\nimport XmlNode from \"./XmlNode\";\r\nimport XmlProcInst from \"./XmlProcInst\";\r\n\r\n/**\r\n * Represents an XML document type definition (DTD).\r\n *\r\n * An XML document type definition  is structured as follows, where\r\n * <code>{name}</code> is the name of the DTD, <code>{sysId}</code> is the\r\n * system identifier of the DTD, <code>{pubId}</code> is the public identifier\r\n * of the DTD, and <code>{intSubset}</code> is the internal subset of the DTD:\r\n * <code><pre>&lt;!DOCTYPE {name} SYSTEM \"{sysId}\" PUBLIC \"{pubId}\" [\r\n *     {intSubset}\r\n * ]&gt;</pre></code>\r\n *\r\n * The <code>{name}</code>, <code>{pubId}</code>, and <code>{sysId}</code>\r\n * values are properties of the node, while the <code>{intSubset}</code> value\r\n * consists of the children of this node.\r\n *\r\n * XmlDtd nodes can have an unlimited number of {@link XmlComment},\r\n * {@link XmlDtdAttlist}, {@link XmlDtdElement}, {@link XmlDtdEntity},\r\n * {@link XmlDtdNotation}, {@link XmlDtdParamEntityRef}, and\r\n * {@link XmlProcInst} nodes.\r\n */\r\nexport default class XmlDtd extends XmlNode {\r\n    /**\r\n     * Initializes a new instance of the {@link XmlDtd} class.\r\n     *\r\n     * @param {string} name    The name of the DTD.\r\n     * @param {string} [sysId] The system identifier of the DTD, excluding\r\n     *                         quotation marks.\r\n     * @param {string} [pubId] The public identifier of the DTD, excluding\r\n     *                         quotation marks. If a public identifier is\r\n     *                         provided, a system identifier must be provided\r\n     *                         as well.\r\n     */\r\n    constructor(name, sysId, pubId) {\r\n        super();\r\n        this.name = name;\r\n        this.sysId = sysId;\r\n        this.pubId = pubId;\r\n    }\r\n\r\n    /**\r\n     * Gets the name of the DTD.\r\n     *\r\n     * @returns {string} The name of the DTD.\r\n     */\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    /**\r\n     * Sets the name of the DTD.\r\n     * \r\n     * @param {string} name The name of the DTD.\r\n     */\r\n    set name(name) {\r\n        if (!typeCheck(\"String\", name)) {\r\n            throw new TypeError(\"name should be a string\");\r\n        } else if (!validate.name(name)) {\r\n            throw new Error(\"name should not contain characters not\" +\r\n                \" allowed in XML names\");\r\n        }\r\n        this._name = name;\r\n    }\r\n\r\n    /**\r\n     * Gets the public identifier of the DTD, excluding quotation marks.\r\n     *\r\n     * @returns {string|undefined} The public identifier of the DTD, excluding\r\n     *                             quotation marks.\r\n     */\r\n    get pubId() {\r\n        return this._pubId;\r\n    }\r\n\r\n    /**\r\n     * Sets the public identifier of the DTD, excluding quotation marks. If a\r\n     * public identifier is provided, a system identifier must be provided as\r\n     * well.\r\n     *\r\n     * @param {string|undefined} pubId The public identifier of the DTD,\r\n     *                                 excluding quotation marks.\r\n     */\r\n    set pubId(pubId) {\r\n        if (typeCheck(\"String\", pubId)) {\r\n            if (!/^(\\u0020|\\u000D|\\u000A|[a-zA-Z0-9]|[-'()+,./:=?;!*#@$_%])*$/\r\n                    .test(pubId)) {\r\n                throw new Error(\"pubId should not contain characters not\" +\r\n                    \" allowed in public identifiers\");\r\n            } else if (typeCheck(\"Undefined\", this.sysId)) {\r\n                throw new Error(\"pubId should not be defined if sysId is\" +\r\n                    \" undefined\");\r\n            }\r\n        } else if (!typeCheck(\"Undefined\", pubId)) {\r\n            throw new TypeError(\"pubId should be a string or undefined\");\r\n        }\r\n        this._pubId = pubId;\r\n    }\r\n\r\n    /**\r\n     * Gets the system identifier of the DTD, excluding quotation marks.\r\n     *\r\n     * @returns {string|undefined} The system identifier of the DTD, excluding\r\n     *                             quotation marks.\r\n     */\r\n    get sysId() {\r\n        return this._sysId;\r\n    }\r\n\r\n    /**\r\n     * Sets the system identifier of the DTD, excluding quotation marks.\r\n     *\r\n     * @param {string|undefined} sysId The system identifier of the DTD,\r\n     *                                 excluding quotation marks.\r\n     */\r\n    set sysId(sysId) {\r\n        if (typeCheck(\"String\", sysId)) {\r\n            if (!validate.char(sysId)) {\r\n                throw new Error(\"sysId should not contain characters not\" +\r\n                    \" allowed in XML\");\r\n            } else if (sysId.indexOf(\"'\") !== -1 &&\r\n                sysId.indexOf(\"\\\"\") !== -1) {\r\n                throw new Error(\"sysId should not contain both single quotes\" +\r\n                    \" and double quotes\");\r\n            }\r\n        } else if (typeCheck(\"Undefined\", sysId)) {\r\n            if (!typeCheck(\"Undefined\", this.pubId)) {\r\n                throw new Error(\"sysId should not be undefined if pubId is\" +\r\n                    \" defined\");\r\n            }\r\n        } else {\r\n            throw new TypeError(\"sysId should be a string or undefined\");\r\n        }\r\n        this._sysId = sysId;\r\n    }\r\n\r\n    /**\r\n     * Inserts a new attribute-list declaration at the specified index. If no\r\n     * index is specified, the node is inserted at the end of this node's\r\n     * children.\r\n     *\r\n     * @param {string} text    The text of the attribute-list declaration.\r\n     * @param {number} [index] The index at which the node should be inserted.\r\n     *                         If no index is specified, the node is inserted\r\n     *                         at the end of this node's children.\r\n     *\r\n     * @returns {XmlDtdAttlist} The newly created attribute-list declaration.\r\n     */\r\n    attlist(text, index) {\r\n        let attlist = new XmlDtdAttlist(text);\r\n        this.insertChild(attlist, index);\r\n        return attlist;\r\n    }\r\n\r\n    /**\r\n     * Inserts a new comment at the specified index. If no index is specified,\r\n     * the node is inserted at the end of this node's children.\r\n     *\r\n     * @param {string} content The data of the comment.\r\n     * @param {number} [index] The index at which the node should be inserted.\r\n     *                         If no index is specified, the node is inserted\r\n     *                         at the end of this node's children.\r\n     *\r\n     * @returns {XmlComment} The newly created comment.\r\n     */\r\n    comment(content, index) {\r\n        let comment = new XmlComment(content);\r\n        this.insertChild(comment, index);\r\n        return comment;\r\n    }\r\n\r\n    /**\r\n     * Inserts a new element declaration at the specified index. If no index is\r\n     * specified, the node is inserted at the end of this node's children.\r\n     *\r\n     * @param {string} text    The text of the element declaration.\r\n     * @param {number} [index] The index at which the node should be inserted.\r\n     *                         If no index is specified, the node is inserted\r\n     *                         at the end of this node's children.\r\n     *\r\n     * @returns {XmlDtdElement} The newly created element declaration.\r\n     */\r\n    element(text, index) {\r\n        let element = new XmlDtdElement(text);\r\n        this.insertChild(element, index);\r\n        return element;\r\n    }\r\n\r\n    /**\r\n     * Inserts a new entity declaration at the specified index. If no index is\r\n     * specified, the node is inserted at the end of this node's children.\r\n     *\r\n     * @param {string} text    The text of the entity declaration.\r\n     * @param {number} [index] The index at which the node should be inserted.\r\n     *                         If no index is specified, the node is inserted\r\n     *                         at the end of this node's children.\r\n     *\r\n     * @returns {XmlDtdEntity} The newly created entity declaration.\r\n     */\r\n    entity(text, index) {\r\n        let entity = new XmlDtdEntity(text);\r\n        this.insertChild(entity, index);\r\n        return entity;\r\n    }\r\n\r\n    /**\r\n     * Inserts the specified node into this node's children at the specified\r\n     * index. The node is not inserted if it is already present. If this node\r\n     * already has a parent, it is removed from that parent.\r\n     *\r\n     * Only {@link XmlComment}, {@link XmlDtdAttlist}, {@link XmlDtdElement},\r\n     * {@link XmlDtdEntity}, {@link XmlDtdNotation}, and {@link XmlProcInst}\r\n     * nodes can be inserted; otherwise an exception will be thrown.\r\n     *\r\n     * @param {XmlNode} node   The node to insert.\r\n     * @param {number} [index] The index at which to insert the node. Nodes at\r\n     *                         or after the index are shifted to the right. If\r\n     *                         no index is specified, the node is inserted at\r\n     *                         the end.\r\n     *\r\n     * @returns {XmlNode} The node inserted into this node's children, or\r\n     *                    undefined if no node was inserted.\r\n     */\r\n    insertChild(node, index) {\r\n        if (!(node instanceof XmlComment || node instanceof XmlDtdAttlist ||\r\n            node instanceof XmlDtdElement || node instanceof XmlDtdEntity ||\r\n            node instanceof XmlDtdNotation ||\r\n            node instanceof XmlDtdParamEntityRef ||\r\n            node instanceof XmlProcInst)) {\r\n            throw new TypeError(\"node should be an instance of\" +\r\n                \" XmlComment, XmlDtdAttlist, XmlDtdElement, XmlDtdEntity,\" +\r\n                \" XmlDtdNotation, XmlDtdParamEntityRef, or XmlProcInst\");\r\n        }\r\n        return super.insertChild(node, index);\r\n    }\r\n\r\n    /**\r\n     * Inserts a new notation declaration at the specified index. If no index is\r\n     * specified, the node is inserted at the end of this node's children.\r\n     *\r\n     * @param {string} text    The text of the notation declaration.\r\n     * @param {number} [index] The index at which the node should be inserted.\r\n     *                         If no index is specified, the node is inserted\r\n     *                         at the end of this node's children.\r\n     *\r\n     * @returns {XmlDtdNotation} The newly created notation declaration.\r\n     */\r\n    notation(text, index) {\r\n        let notation = new XmlDtdNotation(text);\r\n        this.insertChild(notation, index);\r\n        return notation;\r\n    }\r\n\r\n    /**\r\n     * Inserts a new parameter entity reference at the specified index. If no\r\n     * index is specified, the node is inserted at the end of this node's\r\n     * children.\r\n     *\r\n     * @param {string} entity  The entity to reference.\r\n     * @param {number} [index] The index at which the node should be inserted.\r\n     *                         If no index is specified, the node is inserted\r\n     *                         at the end of this node's children.\r\n     *\r\n     * @returns {XmlDtdParamEntityRef} The newly created parameter entity\r\n     *                                 reference.\r\n     */\r\n    paramEntityRef(entity, index) {\r\n        let paramEntity = new XmlDtdParamEntityRef(entity);\r\n        this.insertChild(paramEntity, index);\r\n        return paramEntity;\r\n    }\r\n\r\n    /**\r\n     * Inserts a new processing instruction at the specified index. If no index\r\n     * is specified, the node is inserted at the end of this node's children.\r\n     *\r\n     * @param {string} target    The target of the processing instruction.\r\n     * @param {string} [content] The data of the processing instruction, or\r\n     *                           undefined if there is no target.\r\n     * @param {number} [index]   The index at which the node should be inserted.\r\n     *                           If no index is specified, the node is inserted\r\n     *                           at the end of this node's children.\r\n     *\r\n     * @returns {XmlProcInst} The newly created processing instruction.\r\n     */\r\n    procInst(target, content, index) {\r\n        let procInst = new XmlProcInst(target, content);\r\n        this.insertChild(procInst, index);\r\n        return procInst;\r\n    }\r\n\r\n    /**\r\n     * Returns an XML string representation of this node.\r\n     *\r\n     * @param {StringOptions} [options] Formatting options for the string\r\n     *                                  representation.\r\n     *\r\n     * @returns {string} An XML string representation of this node.\r\n     */\r\n    toString(options = {}) {\r\n        stringOptions.validate(options);\r\n\r\n        let str = \"<!DOCTYPE \" + this.name;\r\n        if (typeCheck(\"Undefined\", this.pubId)) {\r\n            if (!typeCheck(\"Undefined\", this.sysId)) {\r\n                str += \" \";\r\n                str = appendId(\"SYSTEM\", this.sysId, str, options);\r\n            }\r\n        } else {\r\n            str += \" \";\r\n            str = appendId(\"PUBLIC\", this.pubId, str, options);\r\n            str = appendId(\"\", this.sysId, str, options);\r\n        }\r\n\r\n        if (this._children.length !== 0) {\r\n            str += \" [\";\r\n            for (let node of this._children) {\r\n                if (options.pretty) {\r\n                    str += options.newline + options.indent;\r\n                }\r\n                str += node.toString(options);\r\n            }\r\n            if (options.pretty) {\r\n                str += options.newline;\r\n            }\r\n            str += \"]>\";\r\n        } else {\r\n            str += \">\";\r\n        }\r\n\r\n        return str;\r\n    }\r\n}\r\n\r\n/**\r\n * Appends the XML string representation of a public or system identifier to\r\n * an existing string.\r\n *\r\n * @param {string} type           \"SYSTEM\", \"PUBLIC\", or \"\"\r\n * @param {string} value          The value of the identifier.\r\n * @param {string} str            The string to which the string representation\r\n *                                should be appended.\r\n * @param {StringOptions} options Formatting options for the string\r\n *                                representation.\r\n *\r\n * @returns {string} The updated string.\r\n */\r\nfunction appendId(type, value, str, options) {\r\n    str += type + \" \";\r\n    if (options.doubleQuotes) {\r\n        if (value.indexOf(\"\\\"\") !== -1) {\r\n            throw new Error(\"options.doubleQuotes inconsistent with\" +\r\n                \" sysId or pubId\");\r\n        }\r\n        str += \"\\\"\" + value + \"\\\"\";\r\n    } else {\r\n        if (value.indexOf(\"'\") !== -1) {\r\n            throw new Error(\"options.doubleQuotes inconsistent with\" +\r\n                \" sysId or pubId\");\r\n        }\r\n        str += \"'\" + value + \"'\";\r\n    }\r\n    return str;\r\n}\r\n"
  },
  {
    "__docId__": 89,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "XmlDtd",
    "memberof": "src/nodes/XmlDtd.js",
    "longname": "src/nodes/XmlDtd.js~XmlDtd",
    "access": null,
    "export": true,
    "importPath": "xmlcreate/lib/nodes/XmlDtd.js",
    "importStyle": "XmlDtd",
    "description": "Represents an XML document type definition (DTD).\n\nAn XML document type definition  is structured as follows, where\n<code>{name}</code> is the name of the DTD, <code>{sysId}</code> is the\nsystem identifier of the DTD, <code>{pubId}</code> is the public identifier\nof the DTD, and <code>{intSubset}</code> is the internal subset of the DTD:\n<code><pre>&lt;!DOCTYPE {name} SYSTEM \"{sysId}\" PUBLIC \"{pubId}\" [\n    {intSubset}\n]&gt;</pre></code>\n\nThe <code>{name}</code>, <code>{pubId}</code>, and <code>{sysId}</code>\nvalues are properties of the node, while the <code>{intSubset}</code> value\nconsists of the children of this node.\n\nXmlDtd nodes can have an unlimited number of {@link XmlComment},\n{@link XmlDtdAttlist}, {@link XmlDtdElement}, {@link XmlDtdEntity},\n{@link XmlDtdNotation}, {@link XmlDtdParamEntityRef}, and\n{@link XmlProcInst} nodes.",
    "lineNumber": 53,
    "interface": false,
    "extends": [
      "src/nodes/XmlNode.js~XmlNode"
    ]
  },
  {
    "__docId__": 90,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/nodes/XmlDtd.js~XmlDtd",
    "longname": "src/nodes/XmlDtd.js~XmlDtd#constructor",
    "access": null,
    "description": "Initializes a new instance of the {@link XmlDtd} class.",
    "lineNumber": 65,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the DTD."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "sysId",
        "description": "The system identifier of the DTD, excluding\n                        quotation marks."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "pubId",
        "description": "The public identifier of the DTD, excluding\n                        quotation marks. If a public identifier is\n                        provided, a system identifier must be provided\n                        as well."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 91,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "name",
    "memberof": "src/nodes/XmlDtd.js~XmlDtd",
    "longname": "src/nodes/XmlDtd.js~XmlDtd#name",
    "access": null,
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 92,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "sysId",
    "memberof": "src/nodes/XmlDtd.js~XmlDtd",
    "longname": "src/nodes/XmlDtd.js~XmlDtd#sysId",
    "access": null,
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 93,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "pubId",
    "memberof": "src/nodes/XmlDtd.js~XmlDtd",
    "longname": "src/nodes/XmlDtd.js~XmlDtd#pubId",
    "access": null,
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 94,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "name",
    "memberof": "src/nodes/XmlDtd.js~XmlDtd",
    "longname": "src/nodes/XmlDtd.js~XmlDtd#name",
    "access": null,
    "description": "Gets the name of the DTD.",
    "lineNumber": 77,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} The name of the DTD."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The name of the DTD."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 95,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "name",
    "memberof": "src/nodes/XmlDtd.js~XmlDtd",
    "longname": "src/nodes/XmlDtd.js~XmlDtd#name",
    "access": null,
    "description": "Sets the name of the DTD.",
    "lineNumber": 86,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the DTD."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 96,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_name",
    "memberof": "src/nodes/XmlDtd.js~XmlDtd",
    "longname": "src/nodes/XmlDtd.js~XmlDtd#_name",
    "access": null,
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 97,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "pubId",
    "memberof": "src/nodes/XmlDtd.js~XmlDtd",
    "longname": "src/nodes/XmlDtd.js~XmlDtd#pubId",
    "access": null,
    "description": "Gets the public identifier of the DTD, excluding quotation marks.",
    "lineNumber": 102,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string|undefined} The public identifier of the DTD, excluding\n                            quotation marks."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string",
        "undefined"
      ],
      "spread": false,
      "description": "The public identifier of the DTD, excluding\n                            quotation marks."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 98,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "pubId",
    "memberof": "src/nodes/XmlDtd.js~XmlDtd",
    "longname": "src/nodes/XmlDtd.js~XmlDtd#pubId",
    "access": null,
    "description": "Sets the public identifier of the DTD, excluding quotation marks. If a\npublic identifier is provided, a system identifier must be provided as\nwell.",
    "lineNumber": 114,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "pubId",
        "description": "The public identifier of the DTD,\n                                excluding quotation marks."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 99,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_pubId",
    "memberof": "src/nodes/XmlDtd.js~XmlDtd",
    "longname": "src/nodes/XmlDtd.js~XmlDtd#_pubId",
    "access": null,
    "description": null,
    "lineNumber": 127,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "sysId",
    "memberof": "src/nodes/XmlDtd.js~XmlDtd",
    "longname": "src/nodes/XmlDtd.js~XmlDtd#sysId",
    "access": null,
    "description": "Gets the system identifier of the DTD, excluding quotation marks.",
    "lineNumber": 136,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string|undefined} The system identifier of the DTD, excluding\n                            quotation marks."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string",
        "undefined"
      ],
      "spread": false,
      "description": "The system identifier of the DTD, excluding\n                            quotation marks."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 101,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "sysId",
    "memberof": "src/nodes/XmlDtd.js~XmlDtd",
    "longname": "src/nodes/XmlDtd.js~XmlDtd#sysId",
    "access": null,
    "description": "Sets the system identifier of the DTD, excluding quotation marks.",
    "lineNumber": 146,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "sysId",
        "description": "The system identifier of the DTD,\n                                excluding quotation marks."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 102,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_sysId",
    "memberof": "src/nodes/XmlDtd.js~XmlDtd",
    "longname": "src/nodes/XmlDtd.js~XmlDtd#_sysId",
    "access": null,
    "description": null,
    "lineNumber": 164,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 103,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "attlist",
    "memberof": "src/nodes/XmlDtd.js~XmlDtd",
    "longname": "src/nodes/XmlDtd.js~XmlDtd#attlist",
    "access": null,
    "description": "Inserts a new attribute-list declaration at the specified index. If no\nindex is specified, the node is inserted at the end of this node's\nchildren.",
    "lineNumber": 179,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{XmlDtdAttlist} The newly created attribute-list declaration."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "The text of the attribute-list declaration."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "index",
        "description": "The index at which the node should be inserted.\n                        If no index is specified, the node is inserted\n                        at the end of this node's children."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "XmlDtdAttlist"
      ],
      "spread": false,
      "description": "The newly created attribute-list declaration."
    },
    "generator": false
  },
  {
    "__docId__": 104,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "comment",
    "memberof": "src/nodes/XmlDtd.js~XmlDtd",
    "longname": "src/nodes/XmlDtd.js~XmlDtd#comment",
    "access": null,
    "description": "Inserts a new comment at the specified index. If no index is specified,\nthe node is inserted at the end of this node's children.",
    "lineNumber": 196,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{XmlComment} The newly created comment."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "content",
        "description": "The data of the comment."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "index",
        "description": "The index at which the node should be inserted.\n                        If no index is specified, the node is inserted\n                        at the end of this node's children."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "XmlComment"
      ],
      "spread": false,
      "description": "The newly created comment."
    },
    "generator": false
  },
  {
    "__docId__": 105,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "element",
    "memberof": "src/nodes/XmlDtd.js~XmlDtd",
    "longname": "src/nodes/XmlDtd.js~XmlDtd#element",
    "access": null,
    "description": "Inserts a new element declaration at the specified index. If no index is\nspecified, the node is inserted at the end of this node's children.",
    "lineNumber": 213,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{XmlDtdElement} The newly created element declaration."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "The text of the element declaration."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "index",
        "description": "The index at which the node should be inserted.\n                        If no index is specified, the node is inserted\n                        at the end of this node's children."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "XmlDtdElement"
      ],
      "spread": false,
      "description": "The newly created element declaration."
    },
    "generator": false
  },
  {
    "__docId__": 106,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "entity",
    "memberof": "src/nodes/XmlDtd.js~XmlDtd",
    "longname": "src/nodes/XmlDtd.js~XmlDtd#entity",
    "access": null,
    "description": "Inserts a new entity declaration at the specified index. If no index is\nspecified, the node is inserted at the end of this node's children.",
    "lineNumber": 230,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{XmlDtdEntity} The newly created entity declaration."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "The text of the entity declaration."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "index",
        "description": "The index at which the node should be inserted.\n                        If no index is specified, the node is inserted\n                        at the end of this node's children."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "XmlDtdEntity"
      ],
      "spread": false,
      "description": "The newly created entity declaration."
    },
    "generator": false
  },
  {
    "__docId__": 107,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "insertChild",
    "memberof": "src/nodes/XmlDtd.js~XmlDtd",
    "longname": "src/nodes/XmlDtd.js~XmlDtd#insertChild",
    "access": null,
    "description": "Inserts the specified node into this node's children at the specified\nindex. The node is not inserted if it is already present. If this node\nalready has a parent, it is removed from that parent.\n\nOnly {@link XmlComment}, {@link XmlDtdAttlist}, {@link XmlDtdElement},\n{@link XmlDtdEntity}, {@link XmlDtdNotation}, and {@link XmlProcInst}\nnodes can be inserted; otherwise an exception will be thrown.",
    "lineNumber": 254,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{XmlNode} The node inserted into this node's children, or\n                   undefined if no node was inserted."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "XmlNode"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "The node to insert."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "index",
        "description": "The index at which to insert the node. Nodes at\n                        or after the index are shifted to the right. If\n                        no index is specified, the node is inserted at\n                        the end."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "XmlNode"
      ],
      "spread": false,
      "description": "The node inserted into this node's children, or\n                   undefined if no node was inserted."
    },
    "generator": false
  },
  {
    "__docId__": 108,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "notation",
    "memberof": "src/nodes/XmlDtd.js~XmlDtd",
    "longname": "src/nodes/XmlDtd.js~XmlDtd#notation",
    "access": null,
    "description": "Inserts a new notation declaration at the specified index. If no index is\nspecified, the node is inserted at the end of this node's children.",
    "lineNumber": 278,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{XmlDtdNotation} The newly created notation declaration."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "The text of the notation declaration."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "index",
        "description": "The index at which the node should be inserted.\n                        If no index is specified, the node is inserted\n                        at the end of this node's children."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "XmlDtdNotation"
      ],
      "spread": false,
      "description": "The newly created notation declaration."
    },
    "generator": false
  },
  {
    "__docId__": 109,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "paramEntityRef",
    "memberof": "src/nodes/XmlDtd.js~XmlDtd",
    "longname": "src/nodes/XmlDtd.js~XmlDtd#paramEntityRef",
    "access": null,
    "description": "Inserts a new parameter entity reference at the specified index. If no\nindex is specified, the node is inserted at the end of this node's\nchildren.",
    "lineNumber": 297,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{XmlDtdParamEntityRef} The newly created parameter entity\n                                reference."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "entity",
        "description": "The entity to reference."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "index",
        "description": "The index at which the node should be inserted.\n                        If no index is specified, the node is inserted\n                        at the end of this node's children."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "XmlDtdParamEntityRef"
      ],
      "spread": false,
      "description": "The newly created parameter entity\n                                reference."
    },
    "generator": false
  },
  {
    "__docId__": 110,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "procInst",
    "memberof": "src/nodes/XmlDtd.js~XmlDtd",
    "longname": "src/nodes/XmlDtd.js~XmlDtd#procInst",
    "access": null,
    "description": "Inserts a new processing instruction at the specified index. If no index\nis specified, the node is inserted at the end of this node's children.",
    "lineNumber": 316,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{XmlProcInst} The newly created processing instruction."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target of the processing instruction."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "content",
        "description": "The data of the processing instruction, or\n                          undefined if there is no target."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "index",
        "description": "The index at which the node should be inserted.\n                          If no index is specified, the node is inserted\n                          at the end of this node's children."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "XmlProcInst"
      ],
      "spread": false,
      "description": "The newly created processing instruction."
    },
    "generator": false
  },
  {
    "__docId__": 111,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toString",
    "memberof": "src/nodes/XmlDtd.js~XmlDtd",
    "longname": "src/nodes/XmlDtd.js~XmlDtd#toString",
    "access": null,
    "description": "Returns an XML string representation of this node.",
    "lineNumber": 330,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} An XML string representation of this node."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "StringOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "Formatting options for the string\n                                 representation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "An XML string representation of this node."
    },
    "generator": false
  },
  {
    "__docId__": 112,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "appendId",
    "memberof": "src/nodes/XmlDtd.js",
    "longname": "src/nodes/XmlDtd.js~appendId",
    "access": null,
    "export": false,
    "importPath": "xmlcreate/lib/nodes/XmlDtd.js",
    "importStyle": null,
    "description": "Appends the XML string representation of a public or system identifier to\nan existing string.",
    "lineNumber": 378,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} The updated string."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "\"SYSTEM\", \"PUBLIC\", or \"\""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value of the identifier."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "The string to which the string representation\n                               should be appended."
      },
      {
        "nullable": null,
        "types": [
          "StringOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Formatting options for the string\n                               representation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The updated string."
    },
    "generator": false
  },
  {
    "__docId__": 113,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/nodes/XmlDtdAttlist.js",
    "memberof": null,
    "longname": "src/nodes/XmlDtdAttlist.js",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "content": "/**\r\n * Copyright (C) 2016 Michael Kourlas\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\"use strict\";\r\n\r\nimport {typeCheck} from \"type-check\";\r\n\r\nimport * as validate from \"../utils/validate\";\r\n\r\nimport XmlNode from \"./XmlNode\";\r\n\r\n/**\r\n * Represents an XML attribute-list declaration in a document type definition.\r\n *\r\n * An XML attribute-list declaration is structured as follows, where\r\n * <code>{text}</code> is the text of the declaration:\r\n *\r\n * <code>&lt;!ATTLIST {text}&gt;</code>\r\n *\r\n * The <code>{text}</code> value is a property of this node.\r\n *\r\n * XmlDtdAttlist nodes cannot have any children.\r\n */\r\nexport default class XmlDtdAttlist extends XmlNode {\r\n    /**\r\n     * Initializes a new instance of the {@link XmlDtdAttlist} class.\r\n     *\r\n     * @param {string} text The text associated with the XML attribute-list\r\n     *                      declaration.\r\n     */\r\n    constructor(text) {\r\n        super();\r\n        this.text = text;\r\n    }\r\n\r\n    /**\r\n     * Gets the text associated with the XML attribute-list declaration.\r\n     *\r\n     * @return {string} The text associated with the XML attribute-list\r\n     *                  declaration.\r\n     */\r\n    get text() {\r\n        return this._text;\r\n    }\r\n\r\n    /**\r\n     * Sets the text associated with the XML attribute-list declaration.\r\n     *\r\n     * @param {string} text The text associated with the XML attribute-list\r\n     *                      declaration.\r\n     */\r\n    set text(text) {\r\n        if (!typeCheck(\"String\", text)) {\r\n            throw new TypeError(\"text should be a string\");\r\n        } else if (!validate.char(text)) {\r\n            throw new Error(\"data should not contain characters\" +\r\n                \" not allowed in XML\");\r\n        }\r\n        this._text = text;\r\n    }\r\n\r\n    /**\r\n     * Throws an exception since {@link XmlDtdAttlist} nodes cannot have any\r\n     * children.\r\n     */\r\n    children() {\r\n        throw new Error(\"XmlDtdAttlist nodes cannot have children\");\r\n    }\r\n\r\n    /**\r\n     * Throws an exception since {@link XmlDtdAttlist} nodes cannot have any\r\n     * children.\r\n     */\r\n    insertChild(node, index) {\r\n        throw new Error(\"XmlDtdAttlist nodes cannot have children\");\r\n    }\r\n\r\n    /**\r\n     * Throws an exception since {@link XmlDtdAttlist} nodes cannot have any\r\n     * children.\r\n     */\r\n    removeChild(node) {\r\n        throw new Error(\"XmlDtdAttlist nodes cannot have children\");\r\n    }\r\n\r\n    /**\r\n     * Throws an exception since {@link XmlDtdAttlist} nodes cannot have any\r\n     * children.\r\n     */\r\n    removeChildAtIndex(index) {\r\n        throw new Error(\"XmlDtdAttlist nodes cannot have children\");\r\n    }\r\n\r\n    /**\r\n     * Returns an XML string representation of this node.\r\n     *\r\n     * @param {StringOptions} [options] Formatting options for the string\r\n     *                                  representation.\r\n     *\r\n     * @returns {string} An XML string representation of this node.\r\n     */\r\n    toString(options = {}) {\r\n        return \"<!ATTLIST \" + this.text + \">\";\r\n    }\r\n}\r\n"
  },
  {
    "__docId__": 114,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "XmlDtdAttlist",
    "memberof": "src/nodes/XmlDtdAttlist.js",
    "longname": "src/nodes/XmlDtdAttlist.js~XmlDtdAttlist",
    "access": null,
    "export": true,
    "importPath": "xmlcreate/lib/nodes/XmlDtdAttlist.js",
    "importStyle": "XmlDtdAttlist",
    "description": "Represents an XML attribute-list declaration in a document type definition.\n\nAn XML attribute-list declaration is structured as follows, where\n<code>{text}</code> is the text of the declaration:\n\n<code>&lt;!ATTLIST {text}&gt;</code>\n\nThe <code>{text}</code> value is a property of this node.\n\nXmlDtdAttlist nodes cannot have any children.",
    "lineNumber": 37,
    "interface": false,
    "extends": [
      "src/nodes/XmlNode.js~XmlNode"
    ]
  },
  {
    "__docId__": 115,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/nodes/XmlDtdAttlist.js~XmlDtdAttlist",
    "longname": "src/nodes/XmlDtdAttlist.js~XmlDtdAttlist#constructor",
    "access": null,
    "description": "Initializes a new instance of the {@link XmlDtdAttlist} class.",
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "The text associated with the XML attribute-list\n                     declaration."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 116,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "text",
    "memberof": "src/nodes/XmlDtdAttlist.js~XmlDtdAttlist",
    "longname": "src/nodes/XmlDtdAttlist.js~XmlDtdAttlist#text",
    "access": null,
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "text",
    "memberof": "src/nodes/XmlDtdAttlist.js~XmlDtdAttlist",
    "longname": "src/nodes/XmlDtdAttlist.js~XmlDtdAttlist#text",
    "access": null,
    "description": "Gets the text associated with the XML attribute-list declaration.",
    "lineNumber": 55,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The text associated with the XML attribute-list\n                 declaration."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 118,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "text",
    "memberof": "src/nodes/XmlDtdAttlist.js~XmlDtdAttlist",
    "longname": "src/nodes/XmlDtdAttlist.js~XmlDtdAttlist#text",
    "access": null,
    "description": "Sets the text associated with the XML attribute-list declaration.",
    "lineNumber": 65,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "The text associated with the XML attribute-list\n                     declaration."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 119,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_text",
    "memberof": "src/nodes/XmlDtdAttlist.js~XmlDtdAttlist",
    "longname": "src/nodes/XmlDtdAttlist.js~XmlDtdAttlist#_text",
    "access": null,
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 120,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "children",
    "memberof": "src/nodes/XmlDtdAttlist.js~XmlDtdAttlist",
    "longname": "src/nodes/XmlDtdAttlist.js~XmlDtdAttlist#children",
    "access": null,
    "description": "Throws an exception since {@link XmlDtdAttlist} nodes cannot have any\nchildren.",
    "lineNumber": 79,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 121,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "insertChild",
    "memberof": "src/nodes/XmlDtdAttlist.js~XmlDtdAttlist",
    "longname": "src/nodes/XmlDtdAttlist.js~XmlDtdAttlist#insertChild",
    "access": null,
    "description": "Throws an exception since {@link XmlDtdAttlist} nodes cannot have any\nchildren.",
    "lineNumber": 87,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 122,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeChild",
    "memberof": "src/nodes/XmlDtdAttlist.js~XmlDtdAttlist",
    "longname": "src/nodes/XmlDtdAttlist.js~XmlDtdAttlist#removeChild",
    "access": null,
    "description": "Throws an exception since {@link XmlDtdAttlist} nodes cannot have any\nchildren.",
    "lineNumber": 95,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 123,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeChildAtIndex",
    "memberof": "src/nodes/XmlDtdAttlist.js~XmlDtdAttlist",
    "longname": "src/nodes/XmlDtdAttlist.js~XmlDtdAttlist#removeChildAtIndex",
    "access": null,
    "description": "Throws an exception since {@link XmlDtdAttlist} nodes cannot have any\nchildren.",
    "lineNumber": 103,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 124,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toString",
    "memberof": "src/nodes/XmlDtdAttlist.js~XmlDtdAttlist",
    "longname": "src/nodes/XmlDtdAttlist.js~XmlDtdAttlist#toString",
    "access": null,
    "description": "Returns an XML string representation of this node.",
    "lineNumber": 115,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} An XML string representation of this node."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "StringOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "Formatting options for the string\n                                 representation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "An XML string representation of this node."
    },
    "generator": false
  },
  {
    "__docId__": 125,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/nodes/XmlDtdElement.js",
    "memberof": null,
    "longname": "src/nodes/XmlDtdElement.js",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "content": "/**\r\n * Copyright (C) 2016 Michael Kourlas\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\"use strict\";\r\n\r\nimport {typeCheck} from \"type-check\";\r\n\r\nimport * as validate from \"../utils/validate\";\r\n\r\nimport XmlNode from \"./XmlNode\";\r\n\r\n/**\r\n * Represents an XML element declaration in a document type definition.\r\n *\r\n * An XML element declaration is structured as follows, where\r\n * <code>{text}</code> is the text of the declaration:\r\n *\r\n * <code>&lt;!ELEMENT {text}&gt;</code>\r\n *\r\n * The <code>{text}</code> value is a property of this node.\r\n *\r\n * XmlDtdElement nodes cannot have any children.\r\n */\r\nexport default class XmlDtdElement extends XmlNode {\r\n    /**\r\n     * Initializes a new instance of the {@link XmlDtdElement} class.\r\n     *\r\n     * @param {string} text The text associated with the XML element\r\n     *                      declaration.\r\n     */\r\n    constructor(text) {\r\n        super();\r\n        this.text = text;\r\n    }\r\n\r\n    /**\r\n     * Gets the text associated with the XML element declaration.\r\n     *\r\n     * @return {string} The text associated with the XML element declaration.\r\n     */\r\n    get text() {\r\n        return this._text;\r\n    }\r\n\r\n    /**\r\n     * Sets the text associated with the XML element declaration.\r\n     *\r\n     * @param {string} text The text associated with the XML element\r\n     *                      declaration.\r\n     */\r\n    set text(text) {\r\n        if (!typeCheck(\"String\", text)) {\r\n            throw new TypeError(\"text should be a string\");\r\n        } else if (!validate.char(text)) {\r\n            throw new Error(\"data should not contain characters\" +\r\n                \" not allowed in XML\");\r\n        }\r\n        this._text = text;\r\n    }\r\n\r\n    /**\r\n     * Throws an exception since {@link XmlDtdElement} nodes cannot have any\r\n     * children.\r\n     */\r\n    children() {\r\n        throw new Error(\"XmlDtdElement nodes cannot have children\");\r\n    }\r\n\r\n    /**\r\n     * Throws an exception since {@link XmlDtdElement} nodes cannot have any\r\n     * children.\r\n     */\r\n    insertChild(node, index) {\r\n        throw new Error(\"XmlDtdElement nodes cannot have children\");\r\n    }\r\n\r\n    /**\r\n     * Throws an exception since {@link XmlDtdElement} nodes cannot have any\r\n     * children.\r\n     */\r\n    removeChild(node) {\r\n        throw new Error(\"XmlDtdElement nodes cannot have children\");\r\n    }\r\n\r\n    /**\r\n     * Throws an exception since {@link XmlDtdElement} nodes cannot have any\r\n     * children.\r\n     */\r\n    removeChildAtIndex(index) {\r\n        throw new Error(\"XmlDtdElement nodes cannot have children\");\r\n    }\r\n\r\n    /**\r\n     * Returns an XML string representation of this node.\r\n     *\r\n     * @param {StringOptions} [options] Formatting options for the string\r\n     *                                  representation.\r\n     *\r\n     * @returns {string} An XML string representation of this node.\r\n     */\r\n    toString(options = {}) {\r\n        return \"<!ELEMENT \" + this.text + \">\";\r\n    }\r\n}\r\n"
  },
  {
    "__docId__": 126,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "XmlDtdElement",
    "memberof": "src/nodes/XmlDtdElement.js",
    "longname": "src/nodes/XmlDtdElement.js~XmlDtdElement",
    "access": null,
    "export": true,
    "importPath": "xmlcreate/lib/nodes/XmlDtdElement.js",
    "importStyle": "XmlDtdElement",
    "description": "Represents an XML element declaration in a document type definition.\n\nAn XML element declaration is structured as follows, where\n<code>{text}</code> is the text of the declaration:\n\n<code>&lt;!ELEMENT {text}&gt;</code>\n\nThe <code>{text}</code> value is a property of this node.\n\nXmlDtdElement nodes cannot have any children.",
    "lineNumber": 37,
    "interface": false,
    "extends": [
      "src/nodes/XmlNode.js~XmlNode"
    ]
  },
  {
    "__docId__": 127,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/nodes/XmlDtdElement.js~XmlDtdElement",
    "longname": "src/nodes/XmlDtdElement.js~XmlDtdElement#constructor",
    "access": null,
    "description": "Initializes a new instance of the {@link XmlDtdElement} class.",
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "The text associated with the XML element\n                     declaration."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 128,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "text",
    "memberof": "src/nodes/XmlDtdElement.js~XmlDtdElement",
    "longname": "src/nodes/XmlDtdElement.js~XmlDtdElement#text",
    "access": null,
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 129,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "text",
    "memberof": "src/nodes/XmlDtdElement.js~XmlDtdElement",
    "longname": "src/nodes/XmlDtdElement.js~XmlDtdElement#text",
    "access": null,
    "description": "Gets the text associated with the XML element declaration.",
    "lineNumber": 54,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The text associated with the XML element declaration."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 130,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "text",
    "memberof": "src/nodes/XmlDtdElement.js~XmlDtdElement",
    "longname": "src/nodes/XmlDtdElement.js~XmlDtdElement#text",
    "access": null,
    "description": "Sets the text associated with the XML element declaration.",
    "lineNumber": 64,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "The text associated with the XML element\n                     declaration."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 131,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_text",
    "memberof": "src/nodes/XmlDtdElement.js~XmlDtdElement",
    "longname": "src/nodes/XmlDtdElement.js~XmlDtdElement#_text",
    "access": null,
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 132,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "children",
    "memberof": "src/nodes/XmlDtdElement.js~XmlDtdElement",
    "longname": "src/nodes/XmlDtdElement.js~XmlDtdElement#children",
    "access": null,
    "description": "Throws an exception since {@link XmlDtdElement} nodes cannot have any\nchildren.",
    "lineNumber": 78,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 133,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "insertChild",
    "memberof": "src/nodes/XmlDtdElement.js~XmlDtdElement",
    "longname": "src/nodes/XmlDtdElement.js~XmlDtdElement#insertChild",
    "access": null,
    "description": "Throws an exception since {@link XmlDtdElement} nodes cannot have any\nchildren.",
    "lineNumber": 86,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 134,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeChild",
    "memberof": "src/nodes/XmlDtdElement.js~XmlDtdElement",
    "longname": "src/nodes/XmlDtdElement.js~XmlDtdElement#removeChild",
    "access": null,
    "description": "Throws an exception since {@link XmlDtdElement} nodes cannot have any\nchildren.",
    "lineNumber": 94,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 135,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeChildAtIndex",
    "memberof": "src/nodes/XmlDtdElement.js~XmlDtdElement",
    "longname": "src/nodes/XmlDtdElement.js~XmlDtdElement#removeChildAtIndex",
    "access": null,
    "description": "Throws an exception since {@link XmlDtdElement} nodes cannot have any\nchildren.",
    "lineNumber": 102,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 136,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toString",
    "memberof": "src/nodes/XmlDtdElement.js~XmlDtdElement",
    "longname": "src/nodes/XmlDtdElement.js~XmlDtdElement#toString",
    "access": null,
    "description": "Returns an XML string representation of this node.",
    "lineNumber": 114,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} An XML string representation of this node."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "StringOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "Formatting options for the string\n                                 representation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "An XML string representation of this node."
    },
    "generator": false
  },
  {
    "__docId__": 137,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/nodes/XmlDtdEntity.js",
    "memberof": null,
    "longname": "src/nodes/XmlDtdEntity.js",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "content": "/**\r\n * Copyright (C) 2016 Michael Kourlas\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\"use strict\";\r\n\r\nimport {typeCheck} from \"type-check\";\r\n\r\nimport * as validate from \"../utils/validate\";\r\n\r\nimport XmlNode from \"./XmlNode\";\r\n\r\n/**\r\n * Represents an XML entity declaration in a document type definition.\r\n *\r\n * An XML entity declaration is structured as follows, where <code>{text}</code>\r\n * is the text of the declaration:\r\n *\r\n * <code>&lt;!ENTITY {text}&gt;</code>\r\n *\r\n * The <code>{text}</code> value is a property of this node.\r\n *\r\n * XmlDtdEntity nodes cannot have any children.\r\n */\r\nexport default class XmlDtdEntity extends XmlNode {\r\n    /**\r\n     * Initializes a new instance of the {@link XmlDtdEntity} class.\r\n     *\r\n     * @param {string} text The text associated with the XML entity\r\n     *                      declaration.\r\n     */\r\n    constructor(text) {\r\n        super();\r\n        this.text = text;\r\n    }\r\n\r\n    /**\r\n     * Gets the text associated with the XML entity declaration.\r\n     *\r\n     * @return {string} The text associated with the XML entity declaration.\r\n     */\r\n    get text() {\r\n        return this._text;\r\n    }\r\n\r\n    /**\r\n     * Sets the text associated with the XML entity declaration.\r\n     *\r\n     * @param {string} text The text associated with the XML entity declaration.\r\n     */\r\n    set text(text) {\r\n        if (!typeCheck(\"String\", text)) {\r\n            throw new TypeError(\"text should be a string\");\r\n        } else if (!validate.char(text)) {\r\n            throw new Error(\"data should not contain characters\" +\r\n                \" not allowed in XML\");\r\n        }\r\n        this._text = text;\r\n    }\r\n\r\n    /**\r\n     * Throws an exception since {@link XmlDtdEntity} nodes cannot have any\r\n     * children.\r\n     */\r\n    children() {\r\n        throw new Error(\"XmlDtdEntity nodes cannot have children\");\r\n    }\r\n\r\n    /**\r\n     * Throws an exception since {@link XmlDtdEntity} nodes cannot have any\r\n     * children.\r\n     */\r\n    insertChild(node, index) {\r\n        throw new Error(\"XmlDtdEntity nodes cannot have children\");\r\n    }\r\n\r\n    /**\r\n     * Throws an exception since {@link XmlDtdEntity} nodes cannot have any\r\n     * children.\r\n     */\r\n    removeChild(node) {\r\n        throw new Error(\"XmlDtdEntity nodes cannot have children\");\r\n    }\r\n\r\n    /**\r\n     * Throws an exception since {@link XmlDtdEntity} nodes cannot have any\r\n     * children.\r\n     */\r\n    removeChildAtIndex(index) {\r\n        throw new Error(\"XmlDtdEntity nodes cannot have children\");\r\n    }\r\n\r\n    /**\r\n     * Returns an XML string representation of this node.\r\n     *\r\n     * @param {StringOptions} [options] Formatting options for the string\r\n     *                                  representation.\r\n     *\r\n     * @returns {string} An XML string representation of this node.\r\n     */\r\n    toString(options = {}) {\r\n        return \"<!ENTITY \" + this.text + \">\";\r\n    }\r\n}\r\n"
  },
  {
    "__docId__": 138,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "XmlDtdEntity",
    "memberof": "src/nodes/XmlDtdEntity.js",
    "longname": "src/nodes/XmlDtdEntity.js~XmlDtdEntity",
    "access": null,
    "export": true,
    "importPath": "xmlcreate/lib/nodes/XmlDtdEntity.js",
    "importStyle": "XmlDtdEntity",
    "description": "Represents an XML entity declaration in a document type definition.\n\nAn XML entity declaration is structured as follows, where <code>{text}</code>\nis the text of the declaration:\n\n<code>&lt;!ENTITY {text}&gt;</code>\n\nThe <code>{text}</code> value is a property of this node.\n\nXmlDtdEntity nodes cannot have any children.",
    "lineNumber": 37,
    "interface": false,
    "extends": [
      "src/nodes/XmlNode.js~XmlNode"
    ]
  },
  {
    "__docId__": 139,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/nodes/XmlDtdEntity.js~XmlDtdEntity",
    "longname": "src/nodes/XmlDtdEntity.js~XmlDtdEntity#constructor",
    "access": null,
    "description": "Initializes a new instance of the {@link XmlDtdEntity} class.",
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "The text associated with the XML entity\n                     declaration."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 140,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "text",
    "memberof": "src/nodes/XmlDtdEntity.js~XmlDtdEntity",
    "longname": "src/nodes/XmlDtdEntity.js~XmlDtdEntity#text",
    "access": null,
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 141,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "text",
    "memberof": "src/nodes/XmlDtdEntity.js~XmlDtdEntity",
    "longname": "src/nodes/XmlDtdEntity.js~XmlDtdEntity#text",
    "access": null,
    "description": "Gets the text associated with the XML entity declaration.",
    "lineNumber": 54,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The text associated with the XML entity declaration."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 142,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "text",
    "memberof": "src/nodes/XmlDtdEntity.js~XmlDtdEntity",
    "longname": "src/nodes/XmlDtdEntity.js~XmlDtdEntity#text",
    "access": null,
    "description": "Sets the text associated with the XML entity declaration.",
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "The text associated with the XML entity declaration."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 143,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_text",
    "memberof": "src/nodes/XmlDtdEntity.js~XmlDtdEntity",
    "longname": "src/nodes/XmlDtdEntity.js~XmlDtdEntity#_text",
    "access": null,
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 144,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "children",
    "memberof": "src/nodes/XmlDtdEntity.js~XmlDtdEntity",
    "longname": "src/nodes/XmlDtdEntity.js~XmlDtdEntity#children",
    "access": null,
    "description": "Throws an exception since {@link XmlDtdEntity} nodes cannot have any\nchildren.",
    "lineNumber": 77,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 145,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "insertChild",
    "memberof": "src/nodes/XmlDtdEntity.js~XmlDtdEntity",
    "longname": "src/nodes/XmlDtdEntity.js~XmlDtdEntity#insertChild",
    "access": null,
    "description": "Throws an exception since {@link XmlDtdEntity} nodes cannot have any\nchildren.",
    "lineNumber": 85,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 146,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeChild",
    "memberof": "src/nodes/XmlDtdEntity.js~XmlDtdEntity",
    "longname": "src/nodes/XmlDtdEntity.js~XmlDtdEntity#removeChild",
    "access": null,
    "description": "Throws an exception since {@link XmlDtdEntity} nodes cannot have any\nchildren.",
    "lineNumber": 93,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 147,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeChildAtIndex",
    "memberof": "src/nodes/XmlDtdEntity.js~XmlDtdEntity",
    "longname": "src/nodes/XmlDtdEntity.js~XmlDtdEntity#removeChildAtIndex",
    "access": null,
    "description": "Throws an exception since {@link XmlDtdEntity} nodes cannot have any\nchildren.",
    "lineNumber": 101,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 148,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toString",
    "memberof": "src/nodes/XmlDtdEntity.js~XmlDtdEntity",
    "longname": "src/nodes/XmlDtdEntity.js~XmlDtdEntity#toString",
    "access": null,
    "description": "Returns an XML string representation of this node.",
    "lineNumber": 113,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} An XML string representation of this node."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "StringOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "Formatting options for the string\n                                 representation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "An XML string representation of this node."
    },
    "generator": false
  },
  {
    "__docId__": 149,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/nodes/XmlDtdNotation.js",
    "memberof": null,
    "longname": "src/nodes/XmlDtdNotation.js",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "content": "/**\r\n * Copyright (C) 2016 Michael Kourlas\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\"use strict\";\r\n\r\nimport {typeCheck} from \"type-check\";\r\n\r\nimport * as validate from \"../utils/validate\";\r\n\r\nimport XmlNode from \"./XmlNode\";\r\n\r\n/**\r\n * Represents an XML notation declaration in a document type definition.\r\n *\r\n * An XML notation declaration is structured as follows, where\r\n * <code>{text}</code> is the text of the declaration:\r\n * \r\n * <code>&lt;!NOTATION {text}&gt;</code>\r\n *\r\n * The <code>{text}</code> value is a property of this node.\r\n *\r\n * XmlDtdNotation nodes cannot have any children.\r\n */\r\nexport default class XmlDtdNotation extends XmlNode {\r\n    /**\r\n     * Initializes a new instance of the {@link XmlDtdNotation} class.\r\n     *\r\n     * @param {string} text The text associated with the XML notation\r\n     *                      declaration.\r\n     */\r\n    constructor(text) {\r\n        super();\r\n        this.text = text;\r\n    }\r\n\r\n    /**\r\n     * Gets the text associated with the XML notation declaration.\r\n     *\r\n     * @return {string} The text associated with the XML notation declaration.\r\n     */\r\n    get text() {\r\n        return this._text;\r\n    }\r\n\r\n    /**\r\n     * Sets the text associated with the XML notation declaration.\r\n     *\r\n     * @param {string} text The text associated with the XML notation\r\n     *                      declaration.\r\n     */\r\n    set text(text) {\r\n        if (!typeCheck(\"String\", text)) {\r\n            throw new TypeError(\"text should be a string\");\r\n        } else if (!validate.char(text)) {\r\n            throw new Error(\"data should not contain characters\" +\r\n                \" not allowed in XML\");\r\n        }\r\n        this._text = text;\r\n    }\r\n\r\n    /**\r\n     * Throws an exception since {@link XmlDtdNotation} nodes cannot have any\r\n     * children.\r\n     */\r\n    children() {\r\n        throw new Error(\"XmlDtdNotation nodes cannot have children\");\r\n    }\r\n\r\n    /**\r\n     * Throws an exception since {@link XmlDtdNotation} nodes cannot have any\r\n     * children.\r\n     */\r\n    insertChild(node, index) {\r\n        throw new Error(\"XmlDtdNotation nodes cannot have children\");\r\n    }\r\n\r\n    /**\r\n     * Throws an exception since {@link XmlDtdNotation} nodes cannot have any\r\n     * children.\r\n     */\r\n    removeChild(node) {\r\n        throw new Error(\"XmlDtdNotation nodes cannot have children\");\r\n    }\r\n\r\n    /**\r\n     * Throws an exception since {@link XmlDtdNotation} nodes cannot have any\r\n     * children.\r\n     */\r\n    removeChildAtIndex(index) {\r\n        throw new Error(\"XmlDtdNotation nodes cannot have children\");\r\n    }\r\n\r\n    /**\r\n     * Returns an XML string representation of this node.\r\n     *\r\n     * @param {StringOptions} [options] Formatting options for the string\r\n     *                                  representation.\r\n     *\r\n     * @returns {string} An XML string representation of this node.\r\n     */\r\n    toString(options = {}) {\r\n        return \"<!NOTATION \" + this.text + \">\";\r\n    }\r\n}\r\n"
  },
  {
    "__docId__": 150,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "XmlDtdNotation",
    "memberof": "src/nodes/XmlDtdNotation.js",
    "longname": "src/nodes/XmlDtdNotation.js~XmlDtdNotation",
    "access": null,
    "export": true,
    "importPath": "xmlcreate/lib/nodes/XmlDtdNotation.js",
    "importStyle": "XmlDtdNotation",
    "description": "Represents an XML notation declaration in a document type definition.\n\nAn XML notation declaration is structured as follows, where\n<code>{text}</code> is the text of the declaration:\n\n<code>&lt;!NOTATION {text}&gt;</code>\n\nThe <code>{text}</code> value is a property of this node.\n\nXmlDtdNotation nodes cannot have any children.",
    "lineNumber": 37,
    "interface": false,
    "extends": [
      "src/nodes/XmlNode.js~XmlNode"
    ]
  },
  {
    "__docId__": 151,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/nodes/XmlDtdNotation.js~XmlDtdNotation",
    "longname": "src/nodes/XmlDtdNotation.js~XmlDtdNotation#constructor",
    "access": null,
    "description": "Initializes a new instance of the {@link XmlDtdNotation} class.",
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "The text associated with the XML notation\n                     declaration."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 152,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "text",
    "memberof": "src/nodes/XmlDtdNotation.js~XmlDtdNotation",
    "longname": "src/nodes/XmlDtdNotation.js~XmlDtdNotation#text",
    "access": null,
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 153,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "text",
    "memberof": "src/nodes/XmlDtdNotation.js~XmlDtdNotation",
    "longname": "src/nodes/XmlDtdNotation.js~XmlDtdNotation#text",
    "access": null,
    "description": "Gets the text associated with the XML notation declaration.",
    "lineNumber": 54,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The text associated with the XML notation declaration."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 154,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "text",
    "memberof": "src/nodes/XmlDtdNotation.js~XmlDtdNotation",
    "longname": "src/nodes/XmlDtdNotation.js~XmlDtdNotation#text",
    "access": null,
    "description": "Sets the text associated with the XML notation declaration.",
    "lineNumber": 64,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "The text associated with the XML notation\n                     declaration."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 155,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_text",
    "memberof": "src/nodes/XmlDtdNotation.js~XmlDtdNotation",
    "longname": "src/nodes/XmlDtdNotation.js~XmlDtdNotation#_text",
    "access": null,
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 156,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "children",
    "memberof": "src/nodes/XmlDtdNotation.js~XmlDtdNotation",
    "longname": "src/nodes/XmlDtdNotation.js~XmlDtdNotation#children",
    "access": null,
    "description": "Throws an exception since {@link XmlDtdNotation} nodes cannot have any\nchildren.",
    "lineNumber": 78,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 157,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "insertChild",
    "memberof": "src/nodes/XmlDtdNotation.js~XmlDtdNotation",
    "longname": "src/nodes/XmlDtdNotation.js~XmlDtdNotation#insertChild",
    "access": null,
    "description": "Throws an exception since {@link XmlDtdNotation} nodes cannot have any\nchildren.",
    "lineNumber": 86,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 158,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeChild",
    "memberof": "src/nodes/XmlDtdNotation.js~XmlDtdNotation",
    "longname": "src/nodes/XmlDtdNotation.js~XmlDtdNotation#removeChild",
    "access": null,
    "description": "Throws an exception since {@link XmlDtdNotation} nodes cannot have any\nchildren.",
    "lineNumber": 94,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 159,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeChildAtIndex",
    "memberof": "src/nodes/XmlDtdNotation.js~XmlDtdNotation",
    "longname": "src/nodes/XmlDtdNotation.js~XmlDtdNotation#removeChildAtIndex",
    "access": null,
    "description": "Throws an exception since {@link XmlDtdNotation} nodes cannot have any\nchildren.",
    "lineNumber": 102,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 160,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toString",
    "memberof": "src/nodes/XmlDtdNotation.js~XmlDtdNotation",
    "longname": "src/nodes/XmlDtdNotation.js~XmlDtdNotation#toString",
    "access": null,
    "description": "Returns an XML string representation of this node.",
    "lineNumber": 114,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} An XML string representation of this node."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "StringOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "Formatting options for the string\n                                 representation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "An XML string representation of this node."
    },
    "generator": false
  },
  {
    "__docId__": 161,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/nodes/XmlDtdParamEntityRef.js",
    "memberof": null,
    "longname": "src/nodes/XmlDtdParamEntityRef.js",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "content": "/**\r\n * Copyright (C) 2016 Michael Kourlas\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\"use strict\";\r\n\r\nimport {typeCheck} from \"type-check\";\r\n\r\nimport * as validate from \"../utils/validate\";\r\n\r\nimport XmlNode from \"./XmlNode\";\r\n\r\n/**\r\n * Represents an XML parameter entity reference in a document type definition.\r\n *\r\n * An XML parameter entity reference is structured as follows, where\r\n * <code>{entity}</code> is the name of the entity:\r\n *\r\n * <code>%{entity};</code>\r\n *\r\n * The <code>{entity}</code> value is a property of this node.\r\n *\r\n * XmlDtdParamEntityRef nodes cannot have any children.\r\n */\r\nexport default class XmlDtdParamEntityRef extends XmlNode {\r\n    /**\r\n     * Initializes a new instance of the {@link XmlDtdParamEntityRef} class.\r\n     *\r\n     * @param {string} entity The entity to be referenced.\r\n     */\r\n    constructor(entity) {\r\n        super();\r\n        this.entity = entity;\r\n    }\r\n\r\n    /**\r\n     * Gets the entity to be referenced.\r\n     *\r\n     * @returns {string} The entity to be referenced.\r\n     */\r\n    get entity() {\r\n        return this._entity;\r\n    }\r\n\r\n    /**\r\n     * Sets the entity to be referenced.\r\n     *\r\n     * @param {string} entity The entity to be referenced.\r\n     */\r\n    set entity(entity) {\r\n        if (!typeCheck(\"String\", entity)) {\r\n            throw new TypeError(\"entity should be a string\");\r\n        } else if (!validate.name(entity)) {\r\n            throw new Error(\"entity should not contain characters\" +\r\n                \" not allowed in XML names\");\r\n        }\r\n        this._entity = entity;\r\n    }\r\n\r\n    /**\r\n     * Throws an exception since {@link XmlDtdParamEntityRef} nodes cannot have\r\n     * any children.\r\n     */\r\n    children() {\r\n        throw new Error(\"XmlDtdParamEntityRef nodes cannot have children\");\r\n    }\r\n\r\n    /**\r\n     * Throws an exception since {@link XmlDtdParamEntityRef} nodes cannot have\r\n     * any children.\r\n     */\r\n    insertChild(node, index) {\r\n        throw new Error(\"XmlDtdParamEntityRef nodes cannot have children\");\r\n    }\r\n\r\n    /**\r\n     * Throws an exception since {@link XmlDtdParamEntityRef} nodes cannot have\r\n     * any children.\r\n     */\r\n    removeChild(node) {\r\n        throw new Error(\"XmlDtdParamEntityRef nodes cannot have children\");\r\n    }\r\n\r\n    /**\r\n     * Throws an exception since {@link XmlDtdParamEntityRef} nodes cannot have\r\n     * any children.\r\n     */\r\n    removeChildAtIndex(index) {\r\n        throw new Error(\"XmlDtdParamEntityRef nodes cannot have children\");\r\n    }\r\n\r\n    /**\r\n     * Returns an XML string representation of this node.\r\n     *\r\n     * @param {StringOptions} [options] Formatting options for the string\r\n     *                                  representation.\r\n     *\r\n     * @returns {string} An XML string representation of this node.\r\n     */\r\n    toString(options = {}) {\r\n        return \"%\" + this.entity + \";\";\r\n    }\r\n}\r\n"
  },
  {
    "__docId__": 162,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "XmlDtdParamEntityRef",
    "memberof": "src/nodes/XmlDtdParamEntityRef.js",
    "longname": "src/nodes/XmlDtdParamEntityRef.js~XmlDtdParamEntityRef",
    "access": null,
    "export": true,
    "importPath": "xmlcreate/lib/nodes/XmlDtdParamEntityRef.js",
    "importStyle": "XmlDtdParamEntityRef",
    "description": "Represents an XML parameter entity reference in a document type definition.\n\nAn XML parameter entity reference is structured as follows, where\n<code>{entity}</code> is the name of the entity:\n\n<code>%{entity};</code>\n\nThe <code>{entity}</code> value is a property of this node.\n\nXmlDtdParamEntityRef nodes cannot have any children.",
    "lineNumber": 37,
    "interface": false,
    "extends": [
      "src/nodes/XmlNode.js~XmlNode"
    ]
  },
  {
    "__docId__": 163,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/nodes/XmlDtdParamEntityRef.js~XmlDtdParamEntityRef",
    "longname": "src/nodes/XmlDtdParamEntityRef.js~XmlDtdParamEntityRef#constructor",
    "access": null,
    "description": "Initializes a new instance of the {@link XmlDtdParamEntityRef} class.",
    "lineNumber": 43,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "entity",
        "description": "The entity to be referenced."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 164,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "entity",
    "memberof": "src/nodes/XmlDtdParamEntityRef.js~XmlDtdParamEntityRef",
    "longname": "src/nodes/XmlDtdParamEntityRef.js~XmlDtdParamEntityRef#entity",
    "access": null,
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 165,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "entity",
    "memberof": "src/nodes/XmlDtdParamEntityRef.js~XmlDtdParamEntityRef",
    "longname": "src/nodes/XmlDtdParamEntityRef.js~XmlDtdParamEntityRef#entity",
    "access": null,
    "description": "Gets the entity to be referenced.",
    "lineNumber": 53,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} The entity to be referenced."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The entity to be referenced."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 166,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "entity",
    "memberof": "src/nodes/XmlDtdParamEntityRef.js~XmlDtdParamEntityRef",
    "longname": "src/nodes/XmlDtdParamEntityRef.js~XmlDtdParamEntityRef#entity",
    "access": null,
    "description": "Sets the entity to be referenced.",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "entity",
        "description": "The entity to be referenced."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 167,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_entity",
    "memberof": "src/nodes/XmlDtdParamEntityRef.js~XmlDtdParamEntityRef",
    "longname": "src/nodes/XmlDtdParamEntityRef.js~XmlDtdParamEntityRef#_entity",
    "access": null,
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 168,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "children",
    "memberof": "src/nodes/XmlDtdParamEntityRef.js~XmlDtdParamEntityRef",
    "longname": "src/nodes/XmlDtdParamEntityRef.js~XmlDtdParamEntityRef#children",
    "access": null,
    "description": "Throws an exception since {@link XmlDtdParamEntityRef} nodes cannot have\nany children.",
    "lineNumber": 76,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 169,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "insertChild",
    "memberof": "src/nodes/XmlDtdParamEntityRef.js~XmlDtdParamEntityRef",
    "longname": "src/nodes/XmlDtdParamEntityRef.js~XmlDtdParamEntityRef#insertChild",
    "access": null,
    "description": "Throws an exception since {@link XmlDtdParamEntityRef} nodes cannot have\nany children.",
    "lineNumber": 84,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 170,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeChild",
    "memberof": "src/nodes/XmlDtdParamEntityRef.js~XmlDtdParamEntityRef",
    "longname": "src/nodes/XmlDtdParamEntityRef.js~XmlDtdParamEntityRef#removeChild",
    "access": null,
    "description": "Throws an exception since {@link XmlDtdParamEntityRef} nodes cannot have\nany children.",
    "lineNumber": 92,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 171,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeChildAtIndex",
    "memberof": "src/nodes/XmlDtdParamEntityRef.js~XmlDtdParamEntityRef",
    "longname": "src/nodes/XmlDtdParamEntityRef.js~XmlDtdParamEntityRef#removeChildAtIndex",
    "access": null,
    "description": "Throws an exception since {@link XmlDtdParamEntityRef} nodes cannot have\nany children.",
    "lineNumber": 100,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 172,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toString",
    "memberof": "src/nodes/XmlDtdParamEntityRef.js~XmlDtdParamEntityRef",
    "longname": "src/nodes/XmlDtdParamEntityRef.js~XmlDtdParamEntityRef#toString",
    "access": null,
    "description": "Returns an XML string representation of this node.",
    "lineNumber": 112,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} An XML string representation of this node."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "StringOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "Formatting options for the string\n                                 representation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "An XML string representation of this node."
    },
    "generator": false
  },
  {
    "__docId__": 173,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/nodes/XmlElement.js",
    "memberof": null,
    "longname": "src/nodes/XmlElement.js",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "content": "/**\r\n * Copyright (C) 2016 Michael Kourlas\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\"use strict\";\r\n\r\nimport {typeCheck} from \"type-check\";\r\n\r\nimport * as stringOptions from \"../options/string\";\r\nimport * as validate from \"../utils/validate\";\r\n\r\nimport XmlAttribute from \"./XmlAttribute\";\r\nimport XmlCdata from \"./XmlCdata\";\r\nimport XmlCharRef from \"./XmlCharRef\";\r\nimport XmlComment from \"./XmlComment\";\r\nimport XmlEntityRef from \"./XmlEntityRef\";\r\nimport XmlNode from \"./XmlNode\";\r\nimport XmlProcInst from \"./XmlProcInst\";\r\nimport XmlText from \"./XmlText\";\r\n\r\n/**\r\n * Represents an XML element.\r\n *\r\n * A sample XML element is structured as follows, where <code>{name}</code> is\r\n * the name of the element:\r\n * <code><pre>&lt;{name} attname=\"attvalue\"&gt;\r\n *     &lt;subelem/&gt;\r\n *     &lt;?pitarget picontent?&gt;\r\n *     text\r\n * &lt;/{name}&gt;</pre></code>\r\n *\r\n * The <code>{name}</code> value is a property of the node, while the\r\n * attributes and children of the element (such as other elements, processing\r\n * instructions, and text) are children of this node.\r\n *\r\n * XmlElement nodes can have an unlimited number of {@link XmlAttribute},\r\n * {@link XmlCdata}, {@link XmlCharRef}, {@link XmlComment},\r\n * {@link XmlElement}, {@link XmlEntityRef}, {@link XmlProcInst}, or\r\n * {@link XmlText} nodes as children.\r\n */\r\nexport default class XmlElement extends XmlNode {\r\n    /**\r\n     * Initializes a new instance of the {@link XmlElement} class.\r\n     *\r\n     * @param name The name of the element.\r\n     */\r\n    constructor(name) {\r\n        super();\r\n        this.name = name;\r\n    }\r\n\r\n    /**\r\n     * Gets the name of the element.\r\n     *\r\n     * @returns {string} The name of the element.\r\n     */\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    /**\r\n     * Sets the name of the element.\r\n     *\r\n     * @param {string} name The name of the element.\r\n     */\r\n    set name(name) {\r\n        if (!typeCheck(\"String\", name)) {\r\n            throw new TypeError(\"name should be a string\");\r\n        } else if (!validate.name(name)) {\r\n            throw new Error(\"name should not contain characters not\" +\r\n                \" allowed in XML names\");\r\n        }\r\n        this._name = name;\r\n    }\r\n\r\n    /**\r\n     * Inserts an new attribute at the specified index. If no index is\r\n     * specified, the node is inserted at the end of this node's children.\r\n     *\r\n     * @param {string} name\r\n     *        The name of the attribute.\r\n     * @param {string|XmlNode|Array.<string|XmlNode>} value\r\n     *        The value of the attribute. Strings are converted to XmlText\r\n     *        nodes.\r\n     * @param {number} [index]\r\n     *        The index at which the node should be inserted. If no index is\r\n     *        specified, the node is inserted at the end of this node's\r\n     *        children.\r\n     *\r\n     * @returns {XmlAttribute} The newly created attribute.\r\n     */\r\n    attribute(name, value, index) {\r\n        if (typeCheck(\"String\", value)) {\r\n            value = new XmlText(value);\r\n        } else if (typeCheck(\"Array\", value)) {\r\n            for (let i = 0; i < value.length; i++) {\r\n                if (typeCheck(\"String\", value[i])) {\r\n                    value[i] = new XmlText(value[i]);\r\n                }\r\n            }\r\n        }\r\n\r\n        let attribute = new XmlAttribute(name, value);\r\n        this.insertChild(attribute, index);\r\n        return attribute;\r\n    }\r\n\r\n    /**\r\n     * Returns an array containing all of the children of this node that are\r\n     * instances of {@link XmlAttribute}.\r\n     *\r\n     * @returns {XmlAttribute[]} An array containing all of the children of\r\n     *                           this node that are instances of\r\n     *                           {@link XmlAttribute}.\r\n     */\r\n    attributes() {\r\n        return this._children.filter(node => node instanceof XmlAttribute);\r\n    }\r\n\r\n    /**\r\n     * Inserts a new CDATA section at the specified index. If no index is\r\n     * specified, the node is inserted at the end of this node's children.\r\n     *\r\n     * @param {string} content The data of the CDATA section.\r\n     * @param {number} [index] The index at which the node should be inserted.\r\n     *                         If no index is specified, the node is inserted\r\n     *                         at the end of this node's children.\r\n     *\r\n     * @returns {XmlCdata} The newly created CDATA section.\r\n     */\r\n    cdata(content, index) {\r\n        let cdata = new XmlCdata(content);\r\n        this.insertChild(cdata, index);\r\n        return cdata;\r\n    }\r\n\r\n    /**\r\n     * Inserts a new character reference at the specified index. If no index\r\n     * is specified, the node is inserted at the end of this node's children.\r\n     *\r\n     * @param {string} char    The character to represent using the reference.\r\n     * @param {boolean} [hex]  Whether to use the hexadecimal or decimal\r\n     *                         representation for the reference. If left\r\n     *                         undefined, decimal is the default.\r\n     * @param {number} [index] The index at which the node should be inserted.\r\n     *                         If no index is specified, the node is inserted\r\n     *                         at the end of this node's children.\r\n     *\r\n     * @returns {XmlCharRef} The newly created character reference.\r\n     */\r\n    charRef(char, hex, index) {\r\n        let charRef = new XmlCharRef(char, hex);\r\n        this.insertChild(charRef, index);\r\n        return charRef;\r\n    }\r\n\r\n    /**\r\n     * Inserts a new comment at the specified index. If no index is specified,\r\n     * the node is inserted at the end of this node's children.\r\n     *\r\n     * @param {string} content The data of the comment.\r\n     * @param {number} [index] The index at which the node should be inserted.\r\n     *                         If no index is specified, the node is inserted\r\n     *                         at the end of this node's children.\r\n     *\r\n     * @returns {XmlComment} The newly created comment.\r\n     */\r\n    comment(content, index) {\r\n        let comment = new XmlComment(content);\r\n        this.insertChild(comment, index);\r\n        return comment;\r\n    }\r\n\r\n    /**\r\n     * Inserts a new element at the specified index. If no index is specified,\r\n     * the node is inserted at the end of this node's children.\r\n     *\r\n     * @param {string} name    The name of the element.\r\n     * @param {number} [index] The index at which the node should be inserted.\r\n     *                         If no index is specified, the node is inserted\r\n     *                         at the end of this node's children.\r\n     *\r\n     * @returns {XmlElement} The newly created element.\r\n     */\r\n    element(name, index) {\r\n        let element = new XmlElement(name);\r\n        this.insertChild(element, index);\r\n        return element;\r\n    }\r\n\r\n    /**\r\n     * Inserts a new entity reference at the specified index. If no index is\r\n     * specified, the node is inserted at the end of this node's children.\r\n     *\r\n     * @param {string} entity  The entity to be referenced.\r\n     * @param {number} [index] The index at which the node should be inserted.\r\n     *                         If no index is specified, the node is inserted\r\n     *                         at the end of this node's children.\r\n     *\r\n     * @returns {XmlEntityRef} The newly created entity reference.\r\n     */\r\n    entityRef(entity, index) {\r\n        let entityRef = new XmlEntityRef(entity);\r\n        this.insertChild(entityRef, index);\r\n        return entityRef;\r\n    }\r\n\r\n    /**\r\n     * Inserts the specified node into this node's children at the specified\r\n     * index. The node is not inserted if it is already present. If this node\r\n     * already has a parent, it is removed from that parent.\r\n     *\r\n     * Note that only {@link XmlAttribute}, {@link XmlCdata},\r\n     * {@link XmlCharRef}, {@link XmlComment}, {@link XmlElement},\r\n     * {@link XmlEntityRef}, {@link XmlProcInst}, or {@link XmlText} nodes can\r\n     * be inserted; otherwise, an exception will be thrown.\r\n     *\r\n     * @param {XmlNode} node   The node to insert.\r\n     * @param {number} [index] The index at which to insert the node. Nodes at\r\n     *                         or after the index are shifted to the right. If\r\n     *                         no index is specified, the node is inserted at\r\n     *                         the end.\r\n     *\r\n     * @returns {XmlNode} The node inserted into this node's children, or\r\n     *                    undefined if no node was inserted.\r\n     */\r\n    insertChild(node, index) {\r\n        if (!(node instanceof XmlAttribute ||\r\n            node instanceof XmlCdata ||\r\n            node instanceof XmlCharRef ||\r\n            node instanceof XmlComment ||\r\n            node instanceof XmlElement ||\r\n            node instanceof XmlEntityRef ||\r\n            node instanceof XmlProcInst ||\r\n            node instanceof XmlText)) {\r\n            throw new TypeError(\"node should be an instance of\" +\r\n                \" XmlAttribute, XmlCdata, XmlCharRef, XmlComment,\" +\r\n                \" XmlElement, XmlEntityRef, XmlProcInst, or XmlText\");\r\n        }\r\n\r\n        if (node instanceof XmlAttribute) {\r\n            let attributes = this._children.filter(\r\n                node => node instanceof XmlAttribute);\r\n            for (let attribute of attributes) {\r\n                if (attribute.name === node.name) {\r\n                    throw new Error(\"element already contains an\" +\r\n                        \" XmlAttribute object with name \" + node.name);\r\n                }\r\n            }\r\n        }\r\n\r\n        return super.insertChild(node, index);\r\n    }\r\n\r\n    /**\r\n     * Inserts a new processing instruction at the specified index. If no index\r\n     * is specified, the node is inserted at the end of this node's children.\r\n     *\r\n     * @param {string} target    The target of the processing instruction.\r\n     * @param {string} [content] The data of the processing instruction, or\r\n     *                           undefined if there is no target.\r\n     * @param {number} [index]   The index at which the node should be inserted.\r\n     *                           If no index is specified, the node is inserted\r\n     *                           at the end of this node's children.\r\n     *\r\n     * @returns {XmlProcInst} The newly created processing instruction.\r\n     */\r\n    procInst(target, content, index) {\r\n        let procInst = new XmlProcInst(target, content);\r\n        this.insertChild(procInst, index);\r\n        return procInst;\r\n    }\r\n\r\n    /**\r\n     * Inserts some new text at the specified index. If no index is specified,\r\n     * the node is inserted at the end of this node's children.\r\n     *\r\n     * @param {string} text    Arbitrary character data.\r\n     * @param {number} [index] The index at which the node should be inserted.\r\n     *                         If no index is specified, the node is inserted\r\n     *                         at the end of this node's children.\r\n     *\r\n     * @returns {XmlText} The newly created text node.\r\n     */\r\n    text(text, index) {\r\n        let txt = new XmlText(text);\r\n        this.insertChild(txt, index);\r\n        return txt;\r\n    }\r\n\r\n    /**\r\n     * Returns an XML string representation of this node.\r\n     *\r\n     * @param {StringOptions} [options] Formatting options for the string\r\n     *                                  representation.\r\n     *\r\n     * @returns {string} An XML string representation of this node.\r\n     */\r\n    toString(options = {}) {\r\n        stringOptions.validate(options);\r\n\r\n        let attributes = this.attributes();\r\n        let nodes = this._children.filter(node => {\r\n            return attributes.indexOf(node) === -1;\r\n        });\r\n\r\n        // Element tag start\r\n        var str = \"<\" + this._name;\r\n\r\n        // Attributes\r\n        for (let attribute of attributes) {\r\n            str += \" \" + attribute.toString(options);\r\n        }\r\n\r\n        // Child nodes\r\n        if (nodes.length > 0) {\r\n            // Element non-empty tag end\r\n            str += \">\";\r\n\r\n            let indenter = line => options.indent + line;\r\n            for (let i = 0; i < nodes.length; i++) {\r\n                let next = nodes[i];\r\n                let nextStr = next.toString(options);\r\n                let prev = i > 0 ? nodes[i - 1] : undefined;\r\n\r\n                // Line break before child nodes unless all nodes, or at least\r\n                // the most recent two, are of type XmlCharacterReference,\r\n                // XmlEntityReference, or XmlText\r\n                if (options.pretty) {\r\n                    if (!allSameLineNodes(nodes)) {\r\n                        if (!(i > 0 && onSameLine(next, prev))) {\r\n                            str += options.newline;\r\n                            nextStr = nextStr.split(options.newline)\r\n                                .map(indenter)\r\n                                .join(options.newline);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                str += nextStr;\r\n            }\r\n\r\n            // Line break before end tag unless all nodes are of type\r\n            // XmlCharacterReference, XmlEntityReference, or XmlText\r\n            if (options.pretty) {\r\n                if (!allSameLineNodes(nodes)) {\r\n                    str += options.newline;\r\n                }\r\n            }\r\n\r\n            // Element end tag\r\n            str += \"</\" + this._name + \">\";\r\n        } else {\r\n            // Element empty tag end\r\n            str += \"/>\";\r\n        }\r\n\r\n        return str;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns true if the specified nodes are all of type {@link XmlCharRef},\r\n * {@link XmlEntityRef}, or {@link XmlText}.\r\n *\r\n * @param {XmlNode[]} nodes The specified nodes.\r\n *\r\n * @returns {boolean} Whether or not the specified nodes are all of type\r\n *                    {@link XmlCharRef}, {@link XmlEntityRef}, or\r\n *                    {@link XmlText}.\r\n */\r\nfunction allSameLineNodes(nodes) {\r\n    for (let node of nodes) {\r\n        if (!((node instanceof XmlCharRef ||\r\n            node instanceof XmlEntityRef ||\r\n            node instanceof XmlText))) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n/**\r\n * Returns true if the specified nodes are all of type {@link XmlCharRef},\r\n * {@link XmlEntityRef}, or {@link XmlText}.\r\n *\r\n * @param {XmlNode} prev The first specified node.\r\n * @param {XmlNode} next The second specified node.\r\n *\r\n * @returns {boolean} Whether or not the specified nodes are all of type\r\n *                    {@link XmlCharRef}, {@link XmlEntityRef}, or\r\n *                    {@link XmlText}.\r\n */\r\nfunction onSameLine(prev, next) {\r\n    return (prev instanceof XmlCharRef ||\r\n        prev instanceof XmlEntityRef ||\r\n        prev instanceof XmlText) &&\r\n        (next instanceof XmlCharRef ||\r\n        next instanceof XmlEntityRef ||\r\n        next instanceof XmlText);\r\n}\r\n"
  },
  {
    "__docId__": 174,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "XmlElement",
    "memberof": "src/nodes/XmlElement.js",
    "longname": "src/nodes/XmlElement.js~XmlElement",
    "access": null,
    "export": true,
    "importPath": "xmlcreate/lib/nodes/XmlElement.js",
    "importStyle": "XmlElement",
    "description": "Represents an XML element.\n\nA sample XML element is structured as follows, where <code>{name}</code> is\nthe name of the element:\n<code><pre>&lt;{name} attname=\"attvalue\"&gt;\n    &lt;subelem/&gt;\n    &lt;?pitarget picontent?&gt;\n    text\n&lt;/{name}&gt;</pre></code>\n\nThe <code>{name}</code> value is a property of the node, while the\nattributes and children of the element (such as other elements, processing\ninstructions, and text) are children of this node.\n\nXmlElement nodes can have an unlimited number of {@link XmlAttribute},\n{@link XmlCdata}, {@link XmlCharRef}, {@link XmlComment},\n{@link XmlElement}, {@link XmlEntityRef}, {@link XmlProcInst}, or\n{@link XmlText} nodes as children.",
    "lineNumber": 53,
    "interface": false,
    "extends": [
      "src/nodes/XmlNode.js~XmlNode"
    ]
  },
  {
    "__docId__": 175,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/nodes/XmlElement.js~XmlElement",
    "longname": "src/nodes/XmlElement.js~XmlElement#constructor",
    "access": null,
    "description": "Initializes a new instance of the {@link XmlElement} class.",
    "lineNumber": 59,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the element."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 176,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "name",
    "memberof": "src/nodes/XmlElement.js~XmlElement",
    "longname": "src/nodes/XmlElement.js~XmlElement#name",
    "access": null,
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 177,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "name",
    "memberof": "src/nodes/XmlElement.js~XmlElement",
    "longname": "src/nodes/XmlElement.js~XmlElement#name",
    "access": null,
    "description": "Gets the name of the element.",
    "lineNumber": 69,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} The name of the element."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The name of the element."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 178,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "name",
    "memberof": "src/nodes/XmlElement.js~XmlElement",
    "longname": "src/nodes/XmlElement.js~XmlElement#name",
    "access": null,
    "description": "Sets the name of the element.",
    "lineNumber": 78,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the element."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 179,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_name",
    "memberof": "src/nodes/XmlElement.js~XmlElement",
    "longname": "src/nodes/XmlElement.js~XmlElement#_name",
    "access": null,
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 180,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "attribute",
    "memberof": "src/nodes/XmlElement.js~XmlElement",
    "longname": "src/nodes/XmlElement.js~XmlElement#attribute",
    "access": null,
    "description": "Inserts an new attribute at the specified index. If no index is\nspecified, the node is inserted at the end of this node's children.",
    "lineNumber": 104,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{XmlAttribute} The newly created attribute."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the attribute."
      },
      {
        "nullable": null,
        "types": [
          "string",
          "XmlNode",
          "Array.<string",
          "XmlNode>"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value of the attribute. Strings are converted to XmlText\n       nodes."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "index",
        "description": "The index at which the node should be inserted. If no index is\n       specified, the node is inserted at the end of this node's\n       children."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "XmlAttribute"
      ],
      "spread": false,
      "description": "The newly created attribute."
    },
    "generator": false
  },
  {
    "__docId__": 181,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "attributes",
    "memberof": "src/nodes/XmlElement.js~XmlElement",
    "longname": "src/nodes/XmlElement.js~XmlElement#attributes",
    "access": null,
    "description": "Returns an array containing all of the children of this node that are\ninstances of {@link XmlAttribute}.",
    "lineNumber": 128,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{XmlAttribute[]} An array containing all of the children of\n                          this node that are instances of\n                          {@link XmlAttribute}."
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "XmlAttribute[]"
      ],
      "spread": false,
      "description": "An array containing all of the children of\n                          this node that are instances of\n                          {@link XmlAttribute}."
    },
    "generator": false
  },
  {
    "__docId__": 182,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "cdata",
    "memberof": "src/nodes/XmlElement.js~XmlElement",
    "longname": "src/nodes/XmlElement.js~XmlElement#cdata",
    "access": null,
    "description": "Inserts a new CDATA section at the specified index. If no index is\nspecified, the node is inserted at the end of this node's children.",
    "lineNumber": 143,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{XmlCdata} The newly created CDATA section."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "content",
        "description": "The data of the CDATA section."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "index",
        "description": "The index at which the node should be inserted.\n                        If no index is specified, the node is inserted\n                        at the end of this node's children."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "XmlCdata"
      ],
      "spread": false,
      "description": "The newly created CDATA section."
    },
    "generator": false
  },
  {
    "__docId__": 183,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "charRef",
    "memberof": "src/nodes/XmlElement.js~XmlElement",
    "longname": "src/nodes/XmlElement.js~XmlElement#charRef",
    "access": null,
    "description": "Inserts a new character reference at the specified index. If no index\nis specified, the node is inserted at the end of this node's children.",
    "lineNumber": 163,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{XmlCharRef} The newly created character reference."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "char",
        "description": "The character to represent using the reference."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "hex",
        "description": "Whether to use the hexadecimal or decimal\n                        representation for the reference. If left\n                        undefined, decimal is the default."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "index",
        "description": "The index at which the node should be inserted.\n                        If no index is specified, the node is inserted\n                        at the end of this node's children."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "XmlCharRef"
      ],
      "spread": false,
      "description": "The newly created character reference."
    },
    "generator": false
  },
  {
    "__docId__": 184,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "comment",
    "memberof": "src/nodes/XmlElement.js~XmlElement",
    "longname": "src/nodes/XmlElement.js~XmlElement#comment",
    "access": null,
    "description": "Inserts a new comment at the specified index. If no index is specified,\nthe node is inserted at the end of this node's children.",
    "lineNumber": 180,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{XmlComment} The newly created comment."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "content",
        "description": "The data of the comment."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "index",
        "description": "The index at which the node should be inserted.\n                        If no index is specified, the node is inserted\n                        at the end of this node's children."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "XmlComment"
      ],
      "spread": false,
      "description": "The newly created comment."
    },
    "generator": false
  },
  {
    "__docId__": 185,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "element",
    "memberof": "src/nodes/XmlElement.js~XmlElement",
    "longname": "src/nodes/XmlElement.js~XmlElement#element",
    "access": null,
    "description": "Inserts a new element at the specified index. If no index is specified,\nthe node is inserted at the end of this node's children.",
    "lineNumber": 197,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{XmlElement} The newly created element."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the element."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "index",
        "description": "The index at which the node should be inserted.\n                        If no index is specified, the node is inserted\n                        at the end of this node's children."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "XmlElement"
      ],
      "spread": false,
      "description": "The newly created element."
    },
    "generator": false
  },
  {
    "__docId__": 186,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "entityRef",
    "memberof": "src/nodes/XmlElement.js~XmlElement",
    "longname": "src/nodes/XmlElement.js~XmlElement#entityRef",
    "access": null,
    "description": "Inserts a new entity reference at the specified index. If no index is\nspecified, the node is inserted at the end of this node's children.",
    "lineNumber": 214,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{XmlEntityRef} The newly created entity reference."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "entity",
        "description": "The entity to be referenced."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "index",
        "description": "The index at which the node should be inserted.\n                        If no index is specified, the node is inserted\n                        at the end of this node's children."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "XmlEntityRef"
      ],
      "spread": false,
      "description": "The newly created entity reference."
    },
    "generator": false
  },
  {
    "__docId__": 187,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "insertChild",
    "memberof": "src/nodes/XmlElement.js~XmlElement",
    "longname": "src/nodes/XmlElement.js~XmlElement#insertChild",
    "access": null,
    "description": "Inserts the specified node into this node's children at the specified\nindex. The node is not inserted if it is already present. If this node\nalready has a parent, it is removed from that parent.\n\nNote that only {@link XmlAttribute}, {@link XmlCdata},\n{@link XmlCharRef}, {@link XmlComment}, {@link XmlElement},\n{@link XmlEntityRef}, {@link XmlProcInst}, or {@link XmlText} nodes can\nbe inserted; otherwise, an exception will be thrown.",
    "lineNumber": 239,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{XmlNode} The node inserted into this node's children, or\n                   undefined if no node was inserted."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "XmlNode"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "The node to insert."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "index",
        "description": "The index at which to insert the node. Nodes at\n                        or after the index are shifted to the right. If\n                        no index is specified, the node is inserted at\n                        the end."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "XmlNode"
      ],
      "spread": false,
      "description": "The node inserted into this node's children, or\n                   undefined if no node was inserted."
    },
    "generator": false
  },
  {
    "__docId__": 188,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "procInst",
    "memberof": "src/nodes/XmlElement.js~XmlElement",
    "longname": "src/nodes/XmlElement.js~XmlElement#procInst",
    "access": null,
    "description": "Inserts a new processing instruction at the specified index. If no index\nis specified, the node is inserted at the end of this node's children.",
    "lineNumber": 280,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{XmlProcInst} The newly created processing instruction."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target of the processing instruction."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "content",
        "description": "The data of the processing instruction, or\n                          undefined if there is no target."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "index",
        "description": "The index at which the node should be inserted.\n                          If no index is specified, the node is inserted\n                          at the end of this node's children."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "XmlProcInst"
      ],
      "spread": false,
      "description": "The newly created processing instruction."
    },
    "generator": false
  },
  {
    "__docId__": 189,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "text",
    "memberof": "src/nodes/XmlElement.js~XmlElement",
    "longname": "src/nodes/XmlElement.js~XmlElement#text",
    "access": null,
    "description": "Inserts some new text at the specified index. If no index is specified,\nthe node is inserted at the end of this node's children.",
    "lineNumber": 297,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{XmlText} The newly created text node."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "Arbitrary character data."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "index",
        "description": "The index at which the node should be inserted.\n                        If no index is specified, the node is inserted\n                        at the end of this node's children."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "XmlText"
      ],
      "spread": false,
      "description": "The newly created text node."
    },
    "generator": false
  },
  {
    "__docId__": 190,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toString",
    "memberof": "src/nodes/XmlElement.js~XmlElement",
    "longname": "src/nodes/XmlElement.js~XmlElement#toString",
    "access": null,
    "description": "Returns an XML string representation of this node.",
    "lineNumber": 311,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} An XML string representation of this node."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "StringOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "Formatting options for the string\n                                 representation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "An XML string representation of this node."
    },
    "generator": false
  },
  {
    "__docId__": 191,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "allSameLineNodes",
    "memberof": "src/nodes/XmlElement.js",
    "longname": "src/nodes/XmlElement.js~allSameLineNodes",
    "access": null,
    "export": false,
    "importPath": "xmlcreate/lib/nodes/XmlElement.js",
    "importStyle": null,
    "description": "Returns true if the specified nodes are all of type {@link XmlCharRef},\n{@link XmlEntityRef}, or {@link XmlText}.",
    "lineNumber": 384,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} Whether or not the specified nodes are all of type\n                   {@link XmlCharRef}, {@link XmlEntityRef}, or\n                   {@link XmlText}."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "XmlNode[]"
        ],
        "spread": false,
        "optional": false,
        "name": "nodes",
        "description": "The specified nodes."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether or not the specified nodes are all of type\n                   {@link XmlCharRef}, {@link XmlEntityRef}, or\n                   {@link XmlText}."
    },
    "generator": false
  },
  {
    "__docId__": 192,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "onSameLine",
    "memberof": "src/nodes/XmlElement.js",
    "longname": "src/nodes/XmlElement.js~onSameLine",
    "access": null,
    "export": false,
    "importPath": "xmlcreate/lib/nodes/XmlElement.js",
    "importStyle": null,
    "description": "Returns true if the specified nodes are all of type {@link XmlCharRef},\n{@link XmlEntityRef}, or {@link XmlText}.",
    "lineNumber": 406,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} Whether or not the specified nodes are all of type\n                   {@link XmlCharRef}, {@link XmlEntityRef}, or\n                   {@link XmlText}."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "XmlNode"
        ],
        "spread": false,
        "optional": false,
        "name": "prev",
        "description": "The first specified node."
      },
      {
        "nullable": null,
        "types": [
          "XmlNode"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "The second specified node."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether or not the specified nodes are all of type\n                   {@link XmlCharRef}, {@link XmlEntityRef}, or\n                   {@link XmlText}."
    },
    "generator": false
  },
  {
    "__docId__": 193,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/nodes/XmlEntityRef.js",
    "memberof": null,
    "longname": "src/nodes/XmlEntityRef.js",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "content": "/**\r\n * Copyright (C) 2016 Michael Kourlas\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\"use strict\";\r\n\r\nimport {typeCheck} from \"type-check\";\r\n\r\nimport * as validate from \"../utils/validate\";\r\n\r\nimport XmlNode from \"./XmlNode\";\r\n\r\n/**\r\n * Represents an XML entity reference.\r\n *\r\n * An XML entity reference is structured as follows, where \r\n * <code>{entity}</code> is name of the entity to be referenced:\r\n *\r\n * <code>&amp;{entity};</code>\r\n *\r\n * The <code>{entity}</code> value is a property of this node.\r\n *\r\n * XmlEntityRef nodes cannot have any children.\r\n */\r\nexport default class XmlEntityRef extends XmlNode {\r\n    /**\r\n     * Initializes a new instance of the {@link XmlEntityRef} class.\r\n     *\r\n     * @param {string} entity The entity to be referenced.\r\n     */\r\n    constructor(entity) {\r\n        super();\r\n        this.entity = entity;\r\n    }\r\n\r\n    /**\r\n     * Gets the entity to be referenced.\r\n     *\r\n     * @returns {string} The entity to be referenced.\r\n     */\r\n    get entity() {\r\n        return this._entity;\r\n    }\r\n\r\n    /**\r\n     * Sets the entity to be referenced.\r\n     *\r\n     * @param {string} entity The entity to be referenced.\r\n     */\r\n    set entity(entity) {\r\n        if (!typeCheck(\"String\", entity)) {\r\n            throw new TypeError(\"entity should be a string\");\r\n        } else if (!validate.name(entity)) {\r\n            throw new Error(\"entity should not contain characters\" +\r\n                \" not allowed in XML names\");\r\n        }\r\n        this._entity = entity;\r\n    }\r\n\r\n    /**\r\n     * Throws an exception since {@link XmlEntityRef} nodes cannot have any\r\n     * children.\r\n     */\r\n    children() {\r\n        throw new Error(\"XmlEntityRef nodes cannot have children\");\r\n    }\r\n\r\n    /**\r\n     * Throws an exception since {@link XmlEntityRef} nodes cannot have any\r\n     * children.\r\n     */\r\n    insertChild(node, index) {\r\n        throw new Error(\"XmlEntityRef nodes cannot have children\");\r\n    }\r\n\r\n    /**\r\n     * Throws an exception since {@link XmlEntityRef} nodes cannot have any\r\n     * children.\r\n     */\r\n    removeChild(node) {\r\n        throw new Error(\"XmlEntityRef nodes cannot have children\");\r\n    }\r\n\r\n    /**\r\n     * Throws an exception since {@link XmlEntityRef} nodes cannot have any\r\n     * children.\r\n     */\r\n    removeChildAtIndex(index) {\r\n        throw new Error(\"XmlEntityRef nodes cannot have children\");\r\n    }\r\n\r\n    /**\r\n     * Returns an XML string representation of this node.\r\n     *\r\n     * @param {StringOptions} [options] Formatting options for the string\r\n     *                                  representation.\r\n     *\r\n     * @returns {string} An XML string representation of this node.\r\n     */\r\n    toString(options = {}) {\r\n        return \"&\" + this.entity + \";\";\r\n    }\r\n}\r\n"
  },
  {
    "__docId__": 194,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "XmlEntityRef",
    "memberof": "src/nodes/XmlEntityRef.js",
    "longname": "src/nodes/XmlEntityRef.js~XmlEntityRef",
    "access": null,
    "export": true,
    "importPath": "xmlcreate/lib/nodes/XmlEntityRef.js",
    "importStyle": "XmlEntityRef",
    "description": "Represents an XML entity reference.\n\nAn XML entity reference is structured as follows, where \n<code>{entity}</code> is name of the entity to be referenced:\n\n<code>&amp;{entity};</code>\n\nThe <code>{entity}</code> value is a property of this node.\n\nXmlEntityRef nodes cannot have any children.",
    "lineNumber": 37,
    "interface": false,
    "extends": [
      "src/nodes/XmlNode.js~XmlNode"
    ]
  },
  {
    "__docId__": 195,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/nodes/XmlEntityRef.js~XmlEntityRef",
    "longname": "src/nodes/XmlEntityRef.js~XmlEntityRef#constructor",
    "access": null,
    "description": "Initializes a new instance of the {@link XmlEntityRef} class.",
    "lineNumber": 43,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "entity",
        "description": "The entity to be referenced."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 196,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "entity",
    "memberof": "src/nodes/XmlEntityRef.js~XmlEntityRef",
    "longname": "src/nodes/XmlEntityRef.js~XmlEntityRef#entity",
    "access": null,
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 197,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "entity",
    "memberof": "src/nodes/XmlEntityRef.js~XmlEntityRef",
    "longname": "src/nodes/XmlEntityRef.js~XmlEntityRef#entity",
    "access": null,
    "description": "Gets the entity to be referenced.",
    "lineNumber": 53,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} The entity to be referenced."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The entity to be referenced."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 198,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "entity",
    "memberof": "src/nodes/XmlEntityRef.js~XmlEntityRef",
    "longname": "src/nodes/XmlEntityRef.js~XmlEntityRef#entity",
    "access": null,
    "description": "Sets the entity to be referenced.",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "entity",
        "description": "The entity to be referenced."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 199,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_entity",
    "memberof": "src/nodes/XmlEntityRef.js~XmlEntityRef",
    "longname": "src/nodes/XmlEntityRef.js~XmlEntityRef#_entity",
    "access": null,
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 200,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "children",
    "memberof": "src/nodes/XmlEntityRef.js~XmlEntityRef",
    "longname": "src/nodes/XmlEntityRef.js~XmlEntityRef#children",
    "access": null,
    "description": "Throws an exception since {@link XmlEntityRef} nodes cannot have any\nchildren.",
    "lineNumber": 76,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 201,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "insertChild",
    "memberof": "src/nodes/XmlEntityRef.js~XmlEntityRef",
    "longname": "src/nodes/XmlEntityRef.js~XmlEntityRef#insertChild",
    "access": null,
    "description": "Throws an exception since {@link XmlEntityRef} nodes cannot have any\nchildren.",
    "lineNumber": 84,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 202,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeChild",
    "memberof": "src/nodes/XmlEntityRef.js~XmlEntityRef",
    "longname": "src/nodes/XmlEntityRef.js~XmlEntityRef#removeChild",
    "access": null,
    "description": "Throws an exception since {@link XmlEntityRef} nodes cannot have any\nchildren.",
    "lineNumber": 92,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 203,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeChildAtIndex",
    "memberof": "src/nodes/XmlEntityRef.js~XmlEntityRef",
    "longname": "src/nodes/XmlEntityRef.js~XmlEntityRef#removeChildAtIndex",
    "access": null,
    "description": "Throws an exception since {@link XmlEntityRef} nodes cannot have any\nchildren.",
    "lineNumber": 100,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 204,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toString",
    "memberof": "src/nodes/XmlEntityRef.js~XmlEntityRef",
    "longname": "src/nodes/XmlEntityRef.js~XmlEntityRef#toString",
    "access": null,
    "description": "Returns an XML string representation of this node.",
    "lineNumber": 112,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} An XML string representation of this node."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "StringOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "Formatting options for the string\n                                 representation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "An XML string representation of this node."
    },
    "generator": false
  },
  {
    "__docId__": 205,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/nodes/XmlNode.js",
    "memberof": null,
    "longname": "src/nodes/XmlNode.js",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "content": "/**\r\n * Copyright (C) 2016 Michael Kourlas\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\"use strict\";\r\n\r\nimport {typeCheck} from \"type-check\";\r\n\r\n/**\r\n * Represents an XML node.\r\n *\r\n * This class is the root class of the XML node hierarchy. It should not be\r\n * directly instantiated; one of its subclasses should be used instead.\r\n *\r\n * @protected\r\n */\r\nexport default class XmlNode {\r\n    /**\r\n     * Initializes a new instance of the {@link XmlNode} class.\r\n     */\r\n    constructor() {\r\n        this._parent = undefined;\r\n        this._children = [];\r\n    }\r\n\r\n    /**\r\n     * Gets the parent of this node.\r\n     *\r\n     * @returns {XmlNode} The parent of this node.\r\n     */\r\n    get parent() {\r\n        return this._parent;\r\n    }\r\n\r\n    /**\r\n     * Gets this node's children.\r\n     *\r\n     * Throws an exception if this node cannot have any children. Consult the\r\n     * appropriate subclass documentation for more details.\r\n     *\r\n     * @returns {XmlNode[]} This node's children.\r\n     */\r\n    children() {\r\n        return this._children.slice();\r\n    }\r\n\r\n    /**\r\n     * Inserts the specified node into this node's children at the specified\r\n     * index. The node is not inserted if it is already present. If this node\r\n     * already has a parent, it is removed from that parent.\r\n     *\r\n     * Throws an exception if this node cannot have any children, or if the\r\n     * specified node cannot be added at the specified index. Consult the\r\n     * appropriate subclass documentation for more details.\r\n     *\r\n     * @param {XmlNode} node   The node to insert.\r\n     * @param {number} [index] The index at which to insert the node. Nodes at\r\n     *                         or after the index are shifted to the right. If\r\n     *                         no index is specified, the node is inserted at\r\n     *                         the end.\r\n     *\r\n     * @returns {XmlNode} The node inserted into this node's children, or\r\n     *                    undefined if no node was inserted.\r\n     */\r\n    insertChild(node, index = this._children.length) {\r\n        if (!(node instanceof XmlNode)) {\r\n            throw new TypeError(\"node should be an instance of XmlNode\");\r\n        } else if (!typeCheck(\"Number\", index) || !Number.isInteger(index)) {\r\n            throw new TypeError(\"index should be an integer\");\r\n        } else if (index < 0 || index > this._children.length) {\r\n            throw new RangeError(\"index should respect children array bounds\");\r\n        }\r\n\r\n        if (this._children.indexOf(node) === -1) {\r\n            if (!typeCheck(\"Undefined\", node.parent)) {\r\n                node.parent.removeChild(node);\r\n            }\r\n\r\n            node._parent = this;\r\n            this._children.splice(index, 0, node);\r\n            return node;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Gets the node that follows this one, or undefined if no such node\r\n     * exists or if this node has no parent.\r\n     *\r\n     * @returns {XmlNode} The node that follows this one, or undefined if no\r\n     *                    such node exists or if this node has no parent.\r\n     */\r\n    next() {\r\n        if (typeCheck(\"Undefined\", this.parent)) {\r\n            return undefined;\r\n        } else if (this.parent._children.indexOf(this) ===\r\n            this.parent._children.length - 1) {\r\n            return undefined;\r\n        }\r\n\r\n        return this.parent._children[this.parent._children.indexOf(this) + 1];\r\n    }\r\n\r\n    /**\r\n     * Gets the node that is previous to this one, or undefined if no such node\r\n     * exists or if this node has no parent.\r\n     *\r\n     * @returns {XmlNode} The node that is previous to this one, or undefined\r\n     *                    if no such node exists or if this node has no parent.\r\n     */\r\n    prev() {\r\n        if (typeCheck(\"Undefined\", this.parent)) {\r\n            return undefined;\r\n        } else if (this.parent._children.indexOf(this) === 0) {\r\n            return undefined;\r\n        }\r\n\r\n        return this.parent._children[this.parent._children.indexOf(this) - 1];\r\n    }\r\n\r\n    /**\r\n     * Removes this node from its parent if this node has a parent.\r\n     *\r\n     * @returns {XmlNode} This node's parent, or undefined if it has no parent.\r\n     */\r\n    remove() {\r\n        if (!typeCheck(\"Undefined\", this.parent)) {\r\n            let parent = this.parent;\r\n            this.parent.removeChild(this);\r\n            return parent;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Removes the specified node from this node's children.\r\n     *\r\n     * Throws an exception if this node cannot have any children, or if the\r\n     * specified node cannot be removed. Consult the appropriate subclass\r\n     * documentation for more details.\r\n     *\r\n     * @param {XmlNode} node The node to remove.\r\n     *\r\n     * @returns {boolean} Whether a node was removed.\r\n     */\r\n    removeChild(node) {\r\n        if (!(node instanceof XmlNode)) {\r\n            throw new Error(\"node should be an instance of XmlNode\");\r\n        }\r\n\r\n        let index = this._children.indexOf(node);\r\n        if (index !== -1) {\r\n            node._parent = undefined;\r\n            this._children.splice(index, 1);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Removes the node at the specified index from this node's children.\r\n     *\r\n     * Throws an exception if this node cannot have any children, or if the\r\n     * node at the specified index cannot be removed. Consult the appropriate\r\n     * subclass documentation for more details.\r\n     *\r\n     * @param {number} index The index at which the node to be removed is\r\n     *                       located.\r\n     *\r\n     * @returns {XmlNode} The node that was removed, or undefined if no node\r\n     *                    was removed.\r\n     */\r\n    removeChildAtIndex(index) {\r\n        if (!typeCheck(\"Number\", index) || !Number.isInteger(index)) {\r\n            throw new TypeError(\"index should be a number\");\r\n        } else if (index < 0 || index >= this._children.length) {\r\n            throw new RangeError(\"index should respect children array bounds\");\r\n        }\r\n\r\n        let node = this._children[index];\r\n        node._parent = undefined;\r\n        this._children.splice(index, 1);\r\n        return node;\r\n    }\r\n\r\n    /**\r\n     * Returns an XML string representation of this node.\r\n     *\r\n     * @param {StringOptions} [options] Formatting options for the string\r\n     *                                  representation.\r\n     *\r\n     * @returns {string} An XML string representation of this node.\r\n     */\r\n    toString(options = {}) {\r\n        throw new Error(\"toString not implemented for XmlNode\");\r\n    }\r\n\r\n    /**\r\n     * Returns the root node of the current hierarchy. If this node has no\r\n     * parent, this node itself is returned.\r\n     *\r\n     * @returns {XmlNode} The root node of the current hierarchy.\r\n     */\r\n    top() {\r\n        if (typeCheck(\"Undefined\", this.parent)) {\r\n            return this;\r\n        } else {\r\n            return this.parent.top();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the parent of this node.\r\n     *\r\n     * @returns {XmlNode} The parent of this node.\r\n     */\r\n    up() {\r\n        return this.parent;\r\n    }\r\n}\r\n"
  },
  {
    "__docId__": 206,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "XmlNode",
    "memberof": "src/nodes/XmlNode.js",
    "longname": "src/nodes/XmlNode.js~XmlNode",
    "access": "protected",
    "export": true,
    "importPath": "xmlcreate/lib/nodes/XmlNode.js",
    "importStyle": "XmlNode",
    "description": "Represents an XML node.\n\nThis class is the root class of the XML node hierarchy. It should not be\ndirectly instantiated; one of its subclasses should be used instead.",
    "lineNumber": 29,
    "interface": false
  },
  {
    "__docId__": 207,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/nodes/XmlNode.js~XmlNode",
    "longname": "src/nodes/XmlNode.js~XmlNode#constructor",
    "access": null,
    "description": "Initializes a new instance of the {@link XmlNode} class.",
    "lineNumber": 33,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 208,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_parent",
    "memberof": "src/nodes/XmlNode.js~XmlNode",
    "longname": "src/nodes/XmlNode.js~XmlNode#_parent",
    "access": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 209,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_children",
    "memberof": "src/nodes/XmlNode.js~XmlNode",
    "longname": "src/nodes/XmlNode.js~XmlNode#_children",
    "access": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 210,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "parent",
    "memberof": "src/nodes/XmlNode.js~XmlNode",
    "longname": "src/nodes/XmlNode.js~XmlNode#parent",
    "access": null,
    "description": "Gets the parent of this node.",
    "lineNumber": 43,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{XmlNode} The parent of this node."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "XmlNode"
      ],
      "spread": false,
      "description": "The parent of this node."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 211,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "children",
    "memberof": "src/nodes/XmlNode.js~XmlNode",
    "longname": "src/nodes/XmlNode.js~XmlNode#children",
    "access": null,
    "description": "Gets this node's children.\n\nThrows an exception if this node cannot have any children. Consult the\nappropriate subclass documentation for more details.",
    "lineNumber": 55,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{XmlNode[]} This node's children."
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "XmlNode[]"
      ],
      "spread": false,
      "description": "This node's children."
    },
    "generator": false
  },
  {
    "__docId__": 212,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "insertChild",
    "memberof": "src/nodes/XmlNode.js~XmlNode",
    "longname": "src/nodes/XmlNode.js~XmlNode#insertChild",
    "access": null,
    "description": "Inserts the specified node into this node's children at the specified\nindex. The node is not inserted if it is already present. If this node\nalready has a parent, it is removed from that parent.\n\nThrows an exception if this node cannot have any children, or if the\nspecified node cannot be added at the specified index. Consult the\nappropriate subclass documentation for more details.",
    "lineNumber": 77,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{XmlNode} The node inserted into this node's children, or\n                   undefined if no node was inserted."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "XmlNode"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "The node to insert."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "index",
        "description": "The index at which to insert the node. Nodes at\n                        or after the index are shifted to the right. If\n                        no index is specified, the node is inserted at\n                        the end."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "XmlNode"
      ],
      "spread": false,
      "description": "The node inserted into this node's children, or\n                   undefined if no node was inserted."
    },
    "generator": false
  },
  {
    "__docId__": 213,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "next",
    "memberof": "src/nodes/XmlNode.js~XmlNode",
    "longname": "src/nodes/XmlNode.js~XmlNode#next",
    "access": null,
    "description": "Gets the node that follows this one, or undefined if no such node\nexists or if this node has no parent.",
    "lineNumber": 105,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{XmlNode} The node that follows this one, or undefined if no\n                   such node exists or if this node has no parent."
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "XmlNode"
      ],
      "spread": false,
      "description": "The node that follows this one, or undefined if no\n                   such node exists or if this node has no parent."
    },
    "generator": false
  },
  {
    "__docId__": 214,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "prev",
    "memberof": "src/nodes/XmlNode.js~XmlNode",
    "longname": "src/nodes/XmlNode.js~XmlNode#prev",
    "access": null,
    "description": "Gets the node that is previous to this one, or undefined if no such node\nexists or if this node has no parent.",
    "lineNumber": 123,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{XmlNode} The node that is previous to this one, or undefined\n                   if no such node exists or if this node has no parent."
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "XmlNode"
      ],
      "spread": false,
      "description": "The node that is previous to this one, or undefined\n                   if no such node exists or if this node has no parent."
    },
    "generator": false
  },
  {
    "__docId__": 215,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "remove",
    "memberof": "src/nodes/XmlNode.js~XmlNode",
    "longname": "src/nodes/XmlNode.js~XmlNode#remove",
    "access": null,
    "description": "Removes this node from its parent if this node has a parent.",
    "lineNumber": 138,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{XmlNode} This node's parent, or undefined if it has no parent."
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "XmlNode"
      ],
      "spread": false,
      "description": "This node's parent, or undefined if it has no parent."
    },
    "generator": false
  },
  {
    "__docId__": 216,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeChild",
    "memberof": "src/nodes/XmlNode.js~XmlNode",
    "longname": "src/nodes/XmlNode.js~XmlNode#removeChild",
    "access": null,
    "description": "Removes the specified node from this node's children.\n\nThrows an exception if this node cannot have any children, or if the\nspecified node cannot be removed. Consult the appropriate subclass\ndocumentation for more details.",
    "lineNumber": 158,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} Whether a node was removed."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "XmlNode"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "The node to remove."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether a node was removed."
    },
    "generator": false
  },
  {
    "__docId__": 217,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeChildAtIndex",
    "memberof": "src/nodes/XmlNode.js~XmlNode",
    "longname": "src/nodes/XmlNode.js~XmlNode#removeChildAtIndex",
    "access": null,
    "description": "Removes the node at the specified index from this node's children.\n\nThrows an exception if this node cannot have any children, or if the\nnode at the specified index cannot be removed. Consult the appropriate\nsubclass documentation for more details.",
    "lineNumber": 185,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{XmlNode} The node that was removed, or undefined if no node\n                   was removed."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "The index at which the node to be removed is\n                      located."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "XmlNode"
      ],
      "spread": false,
      "description": "The node that was removed, or undefined if no node\n                   was removed."
    },
    "generator": false
  },
  {
    "__docId__": 218,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toString",
    "memberof": "src/nodes/XmlNode.js~XmlNode",
    "longname": "src/nodes/XmlNode.js~XmlNode#toString",
    "access": null,
    "description": "Returns an XML string representation of this node.",
    "lineNumber": 206,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} An XML string representation of this node."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "StringOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "Formatting options for the string\n                                 representation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "An XML string representation of this node."
    },
    "generator": false
  },
  {
    "__docId__": 219,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "top",
    "memberof": "src/nodes/XmlNode.js~XmlNode",
    "longname": "src/nodes/XmlNode.js~XmlNode#top",
    "access": null,
    "description": "Returns the root node of the current hierarchy. If this node has no\nparent, this node itself is returned.",
    "lineNumber": 216,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{XmlNode} The root node of the current hierarchy."
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "XmlNode"
      ],
      "spread": false,
      "description": "The root node of the current hierarchy."
    },
    "generator": false
  },
  {
    "__docId__": 220,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "up",
    "memberof": "src/nodes/XmlNode.js~XmlNode",
    "longname": "src/nodes/XmlNode.js~XmlNode#up",
    "access": null,
    "description": "Gets the parent of this node.",
    "lineNumber": 229,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{XmlNode} The parent of this node."
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "XmlNode"
      ],
      "spread": false,
      "description": "The parent of this node."
    },
    "generator": false
  },
  {
    "__docId__": 221,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/nodes/XmlProcInst.js",
    "memberof": null,
    "longname": "src/nodes/XmlProcInst.js",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "content": "/**\r\n * Copyright (C) 2016 Michael Kourlas\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\"use strict\";\r\n\r\nimport {typeCheck} from \"type-check\";\r\n\r\nimport * as validate from \"../utils/validate\";\r\n\r\nimport XmlNode from \"./XmlNode\";\r\n\r\n/**\r\n * Represents an XML processing instruction.\r\n *\r\n * An XML processing instruction is structured as follows, where\r\n * <code>{target}</code> and <code>{content}</code> are the target and content\r\n * of the processing instruction respectively.\r\n *\r\n * <code>&lt;?{target} {content}?&gt;</code>\r\n *\r\n * The <code>{target}</code> and <code>{content}</code> values are properties\r\n * of this node.\r\n *\r\n * XmlProcInst nodes cannot have any children.\r\n */\r\nexport default class XmlProcInst extends XmlNode {\r\n    /**\r\n     * Initializes a new instance of the {@link XmlProcInst} class.\r\n     *\r\n     * @param {string} target    The target of the processing instruction.\r\n     * @param {string} [content] The data of the processing instruction, or\r\n     *                           undefined if there is no target.\r\n     */\r\n    constructor(target, content) {\r\n        super();\r\n        this.target = target;\r\n        this.content = content;\r\n    }\r\n\r\n    /**\r\n     * Gets the target of the processing instruction.\r\n     *\r\n     * @returns {string} The target of the processing instruction.\r\n     */\r\n    get target() {\r\n        return this._target;\r\n    }\r\n\r\n    /**\r\n     * Sets the target of the processing instruction.\r\n     *\r\n     * @param {string} target The target of the processing instruction.\r\n     */\r\n    set target(target) {\r\n        if (!typeCheck(\"String\", target)) {\r\n            throw new TypeError(\"target should be a string\");\r\n        } else if (!validate.char(target)) {\r\n            throw new Error(\"target should not contain characters\" +\r\n                \" not allowed in XML\");\r\n        } else if (target === \"xml\") {\r\n            throw new Error(\"target should not be the string 'xml'\");\r\n        }\r\n        this._target = target;\r\n    }\r\n\r\n    /**\r\n     * Gets the data of the processing instruction.\r\n     *\r\n     * @returns {string|undefined} The data of the processing instruction.\r\n     */\r\n    get content() {\r\n        return this._content;\r\n    }\r\n\r\n    /**\r\n     * Sets the data of the processing instruction.\r\n     *\r\n     * @param {string|undefined} content The data of the processing\r\n     *                                   instruction.\r\n     */\r\n    set content(content) {\r\n        if (!typeCheck(\"String | Undefined\", content)) {\r\n            throw new TypeError(\"data should be a string\");\r\n        }\r\n        if (typeCheck(\"String\", content)) {\r\n            if (!validate.char(content)) {\r\n                throw new Error(\"data should not contain characters\" +\r\n                    \" not allowed in XML\");\r\n            } else if (/\\?>/.test(content)) {\r\n                throw new Error(\"data should not contain the string '?>'\");\r\n            }\r\n        }\r\n        this._content = content;\r\n    }\r\n\r\n    /**\r\n     * Throws an exception since {@link XmlProcInst} nodes cannot have any\r\n     * children.\r\n     */\r\n    children() {\r\n        throw new Error(\"XmlProcInst nodes cannot have children\");\r\n    }\r\n\r\n    /**\r\n     * Throws an exception since {@link XmlProcInst} nodes cannot have any\r\n     * children.\r\n     */\r\n    insertChild(node, index) {\r\n        throw new Error(\"XmlProcInst nodes cannot have children\");\r\n    }\r\n\r\n    /**\r\n     * Throws an exception since {@link XmlProcInst} nodes cannot have any\r\n     * children.\r\n     */\r\n    removeChild(node) {\r\n        throw new Error(\"XmlProcInst nodes cannot have children\");\r\n    }\r\n\r\n    /**\r\n     * Throws an exception since {@link XmlProcInst} nodes cannot have any\r\n     * children.\r\n     */\r\n    removeChildAtIndex(index) {\r\n        throw new Error(\"XmlProcInst nodes cannot have children\");\r\n    }\r\n\r\n    /**\r\n     * Returns an XML string representation of this node.\r\n     *\r\n     * @param {StringOptions} [options] Formatting options for the string\r\n     *                                  representation.\r\n     *\r\n     * @returns {string} An XML string representation of this node.\r\n     */\r\n    toString(options = {})  {\r\n        if (this.content === undefined) {\r\n            return \"<?\" + this.target + \"?>\";\r\n        } else {\r\n            return \"<?\" + this.target + \" \" + this.content + \"?>\";\r\n        }\r\n    }\r\n}\r\n"
  },
  {
    "__docId__": 222,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "XmlProcInst",
    "memberof": "src/nodes/XmlProcInst.js",
    "longname": "src/nodes/XmlProcInst.js~XmlProcInst",
    "access": null,
    "export": true,
    "importPath": "xmlcreate/lib/nodes/XmlProcInst.js",
    "importStyle": "XmlProcInst",
    "description": "Represents an XML processing instruction.\n\nAn XML processing instruction is structured as follows, where\n<code>{target}</code> and <code>{content}</code> are the target and content\nof the processing instruction respectively.\n\n<code>&lt;?{target} {content}?&gt;</code>\n\nThe <code>{target}</code> and <code>{content}</code> values are properties\nof this node.\n\nXmlProcInst nodes cannot have any children.",
    "lineNumber": 39,
    "interface": false,
    "extends": [
      "src/nodes/XmlNode.js~XmlNode"
    ]
  },
  {
    "__docId__": 223,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/nodes/XmlProcInst.js~XmlProcInst",
    "longname": "src/nodes/XmlProcInst.js~XmlProcInst#constructor",
    "access": null,
    "description": "Initializes a new instance of the {@link XmlProcInst} class.",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target of the processing instruction."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "content",
        "description": "The data of the processing instruction, or\n                          undefined if there is no target."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 224,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "target",
    "memberof": "src/nodes/XmlProcInst.js~XmlProcInst",
    "longname": "src/nodes/XmlProcInst.js~XmlProcInst#target",
    "access": null,
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 225,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "content",
    "memberof": "src/nodes/XmlProcInst.js~XmlProcInst",
    "longname": "src/nodes/XmlProcInst.js~XmlProcInst#content",
    "access": null,
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 226,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "target",
    "memberof": "src/nodes/XmlProcInst.js~XmlProcInst",
    "longname": "src/nodes/XmlProcInst.js~XmlProcInst#target",
    "access": null,
    "description": "Gets the target of the processing instruction.",
    "lineNumber": 58,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} The target of the processing instruction."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The target of the processing instruction."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 227,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "target",
    "memberof": "src/nodes/XmlProcInst.js~XmlProcInst",
    "longname": "src/nodes/XmlProcInst.js~XmlProcInst#target",
    "access": null,
    "description": "Sets the target of the processing instruction.",
    "lineNumber": 67,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target of the processing instruction."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 228,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_target",
    "memberof": "src/nodes/XmlProcInst.js~XmlProcInst",
    "longname": "src/nodes/XmlProcInst.js~XmlProcInst#_target",
    "access": null,
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 229,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "content",
    "memberof": "src/nodes/XmlProcInst.js~XmlProcInst",
    "longname": "src/nodes/XmlProcInst.js~XmlProcInst#content",
    "access": null,
    "description": "Gets the data of the processing instruction.",
    "lineNumber": 84,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string|undefined} The data of the processing instruction."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string",
        "undefined"
      ],
      "spread": false,
      "description": "The data of the processing instruction."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 230,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "content",
    "memberof": "src/nodes/XmlProcInst.js~XmlProcInst",
    "longname": "src/nodes/XmlProcInst.js~XmlProcInst#content",
    "access": null,
    "description": "Sets the data of the processing instruction.",
    "lineNumber": 94,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "content",
        "description": "The data of the processing\n                                  instruction."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 231,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_content",
    "memberof": "src/nodes/XmlProcInst.js~XmlProcInst",
    "longname": "src/nodes/XmlProcInst.js~XmlProcInst#_content",
    "access": null,
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 232,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "children",
    "memberof": "src/nodes/XmlProcInst.js~XmlProcInst",
    "longname": "src/nodes/XmlProcInst.js~XmlProcInst#children",
    "access": null,
    "description": "Throws an exception since {@link XmlProcInst} nodes cannot have any\nchildren.",
    "lineNumber": 113,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 233,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "insertChild",
    "memberof": "src/nodes/XmlProcInst.js~XmlProcInst",
    "longname": "src/nodes/XmlProcInst.js~XmlProcInst#insertChild",
    "access": null,
    "description": "Throws an exception since {@link XmlProcInst} nodes cannot have any\nchildren.",
    "lineNumber": 121,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 234,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeChild",
    "memberof": "src/nodes/XmlProcInst.js~XmlProcInst",
    "longname": "src/nodes/XmlProcInst.js~XmlProcInst#removeChild",
    "access": null,
    "description": "Throws an exception since {@link XmlProcInst} nodes cannot have any\nchildren.",
    "lineNumber": 129,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 235,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeChildAtIndex",
    "memberof": "src/nodes/XmlProcInst.js~XmlProcInst",
    "longname": "src/nodes/XmlProcInst.js~XmlProcInst#removeChildAtIndex",
    "access": null,
    "description": "Throws an exception since {@link XmlProcInst} nodes cannot have any\nchildren.",
    "lineNumber": 137,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 236,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toString",
    "memberof": "src/nodes/XmlProcInst.js~XmlProcInst",
    "longname": "src/nodes/XmlProcInst.js~XmlProcInst#toString",
    "access": null,
    "description": "Returns an XML string representation of this node.",
    "lineNumber": 149,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} An XML string representation of this node."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "StringOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "Formatting options for the string\n                                 representation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "An XML string representation of this node."
    },
    "generator": false
  },
  {
    "__docId__": 237,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/nodes/XmlText.js",
    "memberof": null,
    "longname": "src/nodes/XmlText.js",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "content": "/**\r\n * Copyright (C) 2016 Michael Kourlas\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\"use strict\";\r\n\r\nimport {typeCheck} from \"type-check\";\r\n\r\nimport * as escape from \"../utils/escape\";\r\nimport * as validate from \"../utils/validate\";\r\n\r\nimport XmlNode from \"./XmlNode\";\r\n\r\n/**\r\n * Represents text in an XML document.\r\n *\r\n * This text may only consist of character data, not markup. Restricted\r\n * characters, such as the ampersand (&) and the opening angle bracket (&lt;)\r\n * are all automatically escaped.\r\n *\r\n * To create an character reference or entity reference, you should use\r\n * {@link XmlCharRef} or {@link XmlEntityRef} respectively instead.\r\n *\r\n * XmlText nodes cannot have any children.\r\n */\r\nexport default class XmlText extends XmlNode {\r\n    /**\r\n     * Initializes a new instance of the {@link XmlText} class.\r\n     *\r\n     * @param {string} text Arbitrary character data.\r\n     */\r\n    constructor(text) {\r\n        super();\r\n        this.text = text;\r\n    }\r\n\r\n    /**\r\n     * Gets the text associated with this node.\r\n     *\r\n     * @returns {string} The text associated with this node.\r\n     */\r\n    get text() {\r\n        return this._text;\r\n    }\r\n\r\n    /**\r\n     * Sets the text associated with this node.\r\n     *\r\n     * @param {string} text Arbitrary character data.\r\n     */\r\n    set text(text) {\r\n        if (!typeCheck(\"String\", text)) {\r\n            throw new TypeError(\"text should be a string\");\r\n        } else if (!validate.char(text)) {\r\n            throw new Error(\"text should not contain characters not allowed\" +\r\n                \" in XML\");\r\n        }\r\n\r\n        this._text = text;\r\n    }\r\n\r\n    /**\r\n     * Throws an exception since {@link XmlText} nodes cannot have any\r\n     * children.\r\n     */\r\n    children() {\r\n        throw new Error(\"XmlText nodes cannot have children\");\r\n    }\r\n\r\n    /**\r\n     * Throws an exception since {@link XmlText} nodes cannot have any\r\n     * children.\r\n     */\r\n    insertChild(node, index) {\r\n        throw new Error(\"XmlText nodes cannot have children\");\r\n    }\r\n\r\n    /**\r\n     * Throws an exception since {@link XmlText} nodes cannot have any\r\n     * children.\r\n     */\r\n    removeChild(node) {\r\n        throw new Error(\"XmlText nodes cannot have children\");\r\n    }\r\n\r\n    /**\r\n     * Throws an exception since {@link XmlText} nodes cannot have any\r\n     * children.\r\n     */\r\n    removeChildAtIndex(index) {\r\n        throw new Error(\"XmlText nodes cannot have children\");\r\n    }\r\n\r\n    /**\r\n     * Returns an XML string representation of this node.\r\n     *\r\n     * @param {StringOptions} [options] Formatting options for the string\r\n     *                                  representation.\r\n     *\r\n     * @returns {string} An XML string representation of this node.\r\n     */\r\n    toString(options = {}) {\r\n        let str = this.text;\r\n        str = escape.ampersands(str);\r\n        str = escape.leftAngleBrackets(str);\r\n        return str;\r\n    }\r\n}\r\n"
  },
  {
    "__docId__": 238,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "XmlText",
    "memberof": "src/nodes/XmlText.js",
    "longname": "src/nodes/XmlText.js~XmlText",
    "access": null,
    "export": true,
    "importPath": "xmlcreate/lib/nodes/XmlText.js",
    "importStyle": "XmlText",
    "description": "Represents text in an XML document.\n\nThis text may only consist of character data, not markup. Restricted\ncharacters, such as the ampersand (&) and the opening angle bracket (&lt;)\nare all automatically escaped.\n\nTo create an character reference or entity reference, you should use\n{@link XmlCharRef} or {@link XmlEntityRef} respectively instead.\n\nXmlText nodes cannot have any children.",
    "lineNumber": 38,
    "interface": false,
    "extends": [
      "src/nodes/XmlNode.js~XmlNode"
    ]
  },
  {
    "__docId__": 239,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/nodes/XmlText.js~XmlText",
    "longname": "src/nodes/XmlText.js~XmlText#constructor",
    "access": null,
    "description": "Initializes a new instance of the {@link XmlText} class.",
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "Arbitrary character data."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 240,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "text",
    "memberof": "src/nodes/XmlText.js~XmlText",
    "longname": "src/nodes/XmlText.js~XmlText#text",
    "access": null,
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 241,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "text",
    "memberof": "src/nodes/XmlText.js~XmlText",
    "longname": "src/nodes/XmlText.js~XmlText#text",
    "access": null,
    "description": "Gets the text associated with this node.",
    "lineNumber": 54,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} The text associated with this node."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The text associated with this node."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 242,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "text",
    "memberof": "src/nodes/XmlText.js~XmlText",
    "longname": "src/nodes/XmlText.js~XmlText#text",
    "access": null,
    "description": "Sets the text associated with this node.",
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "Arbitrary character data."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 243,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_text",
    "memberof": "src/nodes/XmlText.js~XmlText",
    "longname": "src/nodes/XmlText.js~XmlText#_text",
    "access": null,
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 244,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "children",
    "memberof": "src/nodes/XmlText.js~XmlText",
    "longname": "src/nodes/XmlText.js~XmlText#children",
    "access": null,
    "description": "Throws an exception since {@link XmlText} nodes cannot have any\nchildren.",
    "lineNumber": 78,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 245,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "insertChild",
    "memberof": "src/nodes/XmlText.js~XmlText",
    "longname": "src/nodes/XmlText.js~XmlText#insertChild",
    "access": null,
    "description": "Throws an exception since {@link XmlText} nodes cannot have any\nchildren.",
    "lineNumber": 86,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 246,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeChild",
    "memberof": "src/nodes/XmlText.js~XmlText",
    "longname": "src/nodes/XmlText.js~XmlText#removeChild",
    "access": null,
    "description": "Throws an exception since {@link XmlText} nodes cannot have any\nchildren.",
    "lineNumber": 94,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 247,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeChildAtIndex",
    "memberof": "src/nodes/XmlText.js~XmlText",
    "longname": "src/nodes/XmlText.js~XmlText#removeChildAtIndex",
    "access": null,
    "description": "Throws an exception since {@link XmlText} nodes cannot have any\nchildren.",
    "lineNumber": 102,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 248,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toString",
    "memberof": "src/nodes/XmlText.js~XmlText",
    "longname": "src/nodes/XmlText.js~XmlText#toString",
    "access": null,
    "description": "Returns an XML string representation of this node.",
    "lineNumber": 114,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} An XML string representation of this node."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "StringOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "Formatting options for the string\n                                 representation."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "An XML string representation of this node."
    },
    "generator": false
  },
  {
    "__docId__": 249,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/options/declaration.js",
    "memberof": null,
    "longname": "src/options/declaration.js",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "content": "/**\r\n * Copyright (C) 2016 Michael Kourlas\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\"use strict\";\r\n\r\nimport {typeCheck} from \"type-check\";\r\n\r\n/**\r\n * @typedef {object} DeclarationOptions\r\n *\r\n * @desc The options associated with the XML declaration. This object is used\r\n *       to create a new {@link XmlDecl} object.\r\n *\r\n * @property {string} [encoding]   The XML encoding to be included in the\r\n *                                 declaration. This value must be a valid\r\n *                                 encoding. If left undefined, no encoding is\r\n *                                 included.\r\n * @property {string} [standalone] The XML standalone attribute to be included.\r\n *                                 This value must be \"yes\" or \"no\". If left\r\n *                                 undefined, no standalone attribute is\r\n *                                 included.\r\n * @property {string} [version]    The XML version to be included in the\r\n *                                 declaration. This value must be a valid XML\r\n *                                 version number. If left undefined, the\r\n *                                 default version is \"1.0\".\r\n */\r\n\r\nconst defaults = {\r\n    encoding: undefined,\r\n    standalone: undefined,\r\n    version: \"1.0\"\r\n};\r\nObject.freeze(defaults);\r\n\r\n/**\r\n * Validates an XML declaration options object and replaces undefined values\r\n * with their appropriate defaults.\r\n *\r\n * @param {DeclarationOptions} options The XML declaration options object to\r\n *                                     validate.\r\n *\r\n * @returns {DeclarationOptions} The updated XML declaration options object.\r\n *\r\n * @private\r\n */\r\nexport function validate(options) {\r\n    if (!typeCheck(\"String | Undefined\", options.encoding)) {\r\n        throw new TypeError(\"options.encoding should be a string or undefined\");\r\n    }\r\n    \r\n    if (!typeCheck(\"String | Undefined\", options.standalone)) {\r\n        throw new TypeError(\"options.standalone should be a string or\" +\r\n            \" undefined\");\r\n    }\r\n\r\n    if (!typeCheck(\"String | Undefined\", options.version)) {\r\n        throw new TypeError(\"options.version should be a string or undefined\");\r\n    }\r\n    if (!typeCheck(\"String\", options.version)) {\r\n        options.version = defaults.version;\r\n    }\r\n\r\n    return options;\r\n}\r\n"
  },
  {
    "__docId__": 250,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "DeclarationOptions",
    "memberof": "src/options/declaration.js",
    "longname": "src/options/declaration.js~DeclarationOptions",
    "access": null,
    "description": "The options associated with the XML declaration. This object is used\n      to create a new {@link XmlDecl} object.",
    "lineNumber": 41,
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "encoding",
        "description": "The XML encoding to be included in the\n                                declaration. This value must be a valid\n                                encoding. If left undefined, no encoding is\n                                included."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "standalone",
        "description": "The XML standalone attribute to be included.\n                                This value must be \"yes\" or \"no\". If left\n                                undefined, no standalone attribute is\n                                included."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "version",
        "description": "The XML version to be included in the\n                                declaration. This value must be a valid XML\n                                version number. If left undefined, the\n                                default version is \"1.0\"."
      }
    ],
    "type": {
      "types": [
        "object"
      ],
      "optional": false,
      "name": "DeclarationOptions"
    }
  },
  {
    "__docId__": 251,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "validate",
    "memberof": "src/options/declaration.js",
    "longname": "src/options/declaration.js~validate",
    "access": "private",
    "export": true,
    "importPath": "xmlcreate/lib/options/declaration.js",
    "importStyle": "{validate}",
    "description": "Validates an XML declaration options object and replaces undefined values\nwith their appropriate defaults.",
    "lineNumber": 59,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{DeclarationOptions} The updated XML declaration options object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DeclarationOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The XML declaration options object to\n                                    validate."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DeclarationOptions"
      ],
      "spread": false,
      "description": "The updated XML declaration options object."
    },
    "generator": false
  },
  {
    "__docId__": 252,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/options/string.js",
    "memberof": null,
    "longname": "src/options/string.js",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "content": "/**\r\n * Copyright (C) 2016 Michael Kourlas\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\"use strict\";\r\n\r\nimport {typeCheck} from \"type-check\";\r\n\r\n/**\r\n * @typedef {object} StringOptions\r\n *\r\n * @desc Formatting options for the string representation of an\r\n *       {@link XmlNode} and its children. This object is used by\r\n *       {@link XmlNode#toString}.\r\n *\r\n * @property {boolean} [doubleQuotes] Whether double quotes or single quotes\r\n *                                    should be used in XML attributes. If left\r\n *                                    undefined, single quotes are used.\r\n * @property {string} [indent]        The indent string used for\r\n *                                    pretty-printing. If left undefined, the\r\n *                                    default indent string is four spaces\r\n *                                    (\"    \").\r\n * @property {string} [newline]       The newline string used for\r\n *                                    pretty-printing. If left undefined,\r\n *                                    the default newline string is \"\\n\".\r\n * @property {boolean} [pretty]       Whether pretty-printing is enabled. If\r\n *                                    left undefined, pretty-printing is\r\n *                                    enabled.\r\n */\r\n\r\nconst defaults = {\r\n    doubleQuotes: false,\r\n    indent: \"    \",\r\n    newline: \"\\n\",\r\n    pretty: true\r\n};\r\nObject.freeze(defaults);\r\n\r\n/**\r\n * Validates a string options object and replaces undefined values with their\r\n * appropriate defaults.\r\n *\r\n * @param {StringOptions} options The string options object to validate.\r\n *\r\n * @returns {StringOptions} The updated string options object.\r\n *\r\n * @private\r\n */\r\nexport function validate(options) {\r\n    if (!typeCheck(\"Boolean | Undefined\", options.doubleQuotes)) {\r\n        throw new TypeError(\"options.doubleQuotes should be a boolean\");\r\n    }\r\n    if (!typeCheck(\"Boolean\", options.doubleQuotes)) {\r\n        options.doubleQuotes = defaults.doubleQuotes;\r\n    }\r\n    \r\n    if (!typeCheck(\"String | Undefined\", options.indent)) {\r\n        throw new TypeError(\"options.indent should be a boolean\");\r\n    }\r\n    if (!typeCheck(\"String\", options.indent)) {\r\n        options.indent = defaults.indent;\r\n    }\r\n    \r\n    if (!typeCheck(\"String | Undefined\", options.newline)) {\r\n        throw new TypeError(\"options.newline should be a boolean\");\r\n    }\r\n    if (!typeCheck(\"String\", options.newline)) {\r\n        options.newline = defaults.newline;\r\n    }\r\n    \r\n    if (!typeCheck(\"Boolean | Undefined\", options.pretty)) {\r\n        throw new TypeError(\"options.pretty should be a boolean\");\r\n    }\r\n    if (!typeCheck(\"Boolean\", options.pretty)) {\r\n        options.pretty = defaults.pretty;\r\n    }\r\n\r\n    return options;\r\n}\r\n"
  },
  {
    "__docId__": 253,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "StringOptions",
    "memberof": "src/options/string.js",
    "longname": "src/options/string.js~StringOptions",
    "access": null,
    "description": "Formatting options for the string representation of an\n      {@link XmlNode} and its children. This object is used by\n      {@link XmlNode#toString}.",
    "lineNumber": 43,
    "properties": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "doubleQuotes",
        "description": "Whether double quotes or single quotes\n                                   should be used in XML attributes. If left\n                                   undefined, single quotes are used."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "indent",
        "description": "The indent string used for\n                                   pretty-printing. If left undefined, the\n                                   default indent string is four spaces\n                                   (\"    \")."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "newline",
        "description": "The newline string used for\n                                   pretty-printing. If left undefined,\n                                   the default newline string is \"\\n\"."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "pretty",
        "description": "Whether pretty-printing is enabled. If\n                                   left undefined, pretty-printing is\n                                   enabled."
      }
    ],
    "type": {
      "types": [
        "object"
      ],
      "optional": false,
      "name": "StringOptions"
    }
  },
  {
    "__docId__": 254,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "validate",
    "memberof": "src/options/string.js",
    "longname": "src/options/string.js~validate",
    "access": "private",
    "export": true,
    "importPath": "xmlcreate/lib/options/string.js",
    "importStyle": "{validate}",
    "description": "Validates a string options object and replaces undefined values with their\nappropriate defaults.",
    "lineNumber": 61,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{StringOptions} The updated string options object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "StringOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The string options object to validate."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "StringOptions"
      ],
      "spread": false,
      "description": "The updated string options object."
    },
    "generator": false
  },
  {
    "__docId__": 255,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/utils/escape.js",
    "memberof": null,
    "longname": "src/utils/escape.js",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "content": "/**\r\n * Copyright (C) 2016 Michael Kourlas\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\"use strict\";\r\n\r\n/**\r\n * Replaces ampersands (&) with the appropriate XML character reference.\r\n *\r\n * @param {string} str The string to escape.\r\n *\r\n * @returns {string} A copy of the specified string with ampersands escaped.\r\n *\r\n * @private\r\n */\r\nexport function ampersands(str) {\r\n    return str.replace(/&/g, \"&amp;\");\r\n}\r\n\r\n/**\r\n * Replaces left angle brackets (&lt;) with the appropriate XML character\r\n * reference.\r\n *\r\n * @param {string} str The string to escape.\r\n *\r\n * @returns {string} A copy of the specified string with left angle brackets\r\n *                   escaped.\r\n *\r\n * @private\r\n */\r\nexport function leftAngleBrackets(str) {\r\n    return str.replace(/</g, \"&lt;\");\r\n}\r\n\r\n/**\r\n * Replaces single quotes (\") with the appropriate XML character reference.\r\n *\r\n * @param {string} str The string to escape.\r\n *\r\n * @returns {string} A copy of the specified string with single quotes escaped.\r\n *\r\n * @private\r\n */\r\nexport function singleQuotes(str) {\r\n    return str.replace(/'/g, \"&apos;\");\r\n}\r\n\r\n/**\r\n * Replaces double quotes (\") with the appropriate XML character reference.\r\n *\r\n * @param {string} str The string to escape.\r\n *\r\n * @returns {string} A copy of the specified string with double quotes escaped.\r\n * \r\n * @private\r\n */\r\nexport function doubleQuotes(str) {\r\n    return str.replace(/\"/g, \"&quot;\");\r\n}\r\n"
  },
  {
    "__docId__": 256,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "ampersands",
    "memberof": "src/utils/escape.js",
    "longname": "src/utils/escape.js~ampersands",
    "access": "private",
    "export": true,
    "importPath": "xmlcreate/lib/utils/escape.js",
    "importStyle": "{ampersands}",
    "description": "Replaces ampersands (&) with the appropriate XML character reference.",
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} A copy of the specified string with ampersands escaped."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "The string to escape."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "A copy of the specified string with ampersands escaped."
    },
    "generator": false
  },
  {
    "__docId__": 257,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "leftAngleBrackets",
    "memberof": "src/utils/escape.js",
    "longname": "src/utils/escape.js~leftAngleBrackets",
    "access": "private",
    "export": true,
    "importPath": "xmlcreate/lib/utils/escape.js",
    "importStyle": "{leftAngleBrackets}",
    "description": "Replaces left angle brackets (&lt;) with the appropriate XML character\nreference.",
    "lineNumber": 43,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} A copy of the specified string with left angle brackets\n                  escaped."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "The string to escape."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "A copy of the specified string with left angle brackets\n                  escaped."
    },
    "generator": false
  },
  {
    "__docId__": 258,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "singleQuotes",
    "memberof": "src/utils/escape.js",
    "longname": "src/utils/escape.js~singleQuotes",
    "access": "private",
    "export": true,
    "importPath": "xmlcreate/lib/utils/escape.js",
    "importStyle": "{singleQuotes}",
    "description": "Replaces single quotes (\") with the appropriate XML character reference.",
    "lineNumber": 56,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} A copy of the specified string with single quotes escaped."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "The string to escape."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "A copy of the specified string with single quotes escaped."
    },
    "generator": false
  },
  {
    "__docId__": 259,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "doubleQuotes",
    "memberof": "src/utils/escape.js",
    "longname": "src/utils/escape.js~doubleQuotes",
    "access": "private",
    "export": true,
    "importPath": "xmlcreate/lib/utils/escape.js",
    "importStyle": "{doubleQuotes}",
    "description": "Replaces double quotes (\") with the appropriate XML character reference.",
    "lineNumber": 69,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} A copy of the specified string with double quotes escaped."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "The string to escape."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "A copy of the specified string with double quotes escaped."
    },
    "generator": false
  },
  {
    "__docId__": 260,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/utils/validate.js",
    "memberof": null,
    "longname": "src/utils/validate.js",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "content": "/**\r\n * Copyright (C) 2016 Michael Kourlas\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n\"use strict\";\r\n\r\n/**\r\n * Verifies that the specified string only contains characters permitted by the\r\n * XML specification.\r\n *\r\n * @param {string} str The string to validate.\r\n *\r\n * @returns {boolean} Whether the specified string only contains characters\r\n *                    permitted by the XML specification.\r\n *                    \r\n * @private\r\n */\r\nexport function char(str) {\r\n    let charRegex = \"\\\\u0009|\\\\u000A|\\\\u000D|[\\\\u0020-\\\\uD7FF]\";\r\n    let surrogateCharRegex = \"[\\\\uD800-\\\\uDBFF][\\\\uDC00-\\\\uDFFF]\";\r\n\r\n    return new RegExp(\"^((\" + charRegex + \")|(\" + surrogateCharRegex + \"))*$\")\r\n        .test(str);\r\n}\r\n\r\n/**\r\n * Verifies that the specified string only contains a single character, and\r\n * that this character is permitted by the XML specification.\r\n *\r\n * @param {string} str The string to validate.\r\n *\r\n * @returns {boolean} Whether the specified string only contains a single\r\n *                    character, and that this character is permitted by the\r\n *                    XML specification.\r\n *\r\n * @private\r\n */\r\nexport function singleChar(str) {\r\n    if (str.length === 1) {\r\n        return new RegExp(\"^\\\\u0009|\\\\u000A|\\\\u000D|[\\\\u0020-\\\\uD7FF]$\")\r\n            .test(str);\r\n    } else if (str.length === 2) {\r\n        return new RegExp(\"^[\\\\uD800-\\\\uDBFF][\\\\uDC00-\\\\uDFFF]$\").test(str);\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n * Verifies that the specified string only contains characters permitted by the\r\n * XML specification for names.\r\n *\r\n * @param {string} str The string to validate.\r\n *\r\n * @returns {boolean} Whether the specified string only contains characters\r\n *                    permitted by the XML specification for names.\r\n *\r\n * @private\r\n */\r\nexport function name(str) {\r\n    if (str.length === 0) {\r\n        return false;\r\n    }\r\n\r\n    let nameStartChar = \":|[A-Z]|_|[a-z]|[\\\\u00C0-\\\\u00D6]|[\\\\u00D8-\\\\u00F6]\" +\r\n        \"|[\\\\u00F8-\\\\u02FF]|[\\\\u0370-\\\\u037D]|[\\\\u037F-\\\\u1FFF]\" +\r\n        \"|[\\\\u200C-\\\\u200D]|[\\\\u2070-\\\\u218F]|[\\\\u2C00-\\\\u2FEF]\" +\r\n        \"|[\\\\u3001-\\\\uD7FF]|[\\\\uF900-\\\\uFDCF]|[\\\\uFDF0-\\\\uFFFD]\";\r\n    let nameStartCharWithSurrogatePair = \"[\\\\uD800-\\\\uDB7F][\\\\uDC00-\\\\uDFFF]\";\r\n\r\n    let nameChar = nameStartChar + \"|-|\\\\.|[0-9]|\\\\u00B7|[\\\\u0300-\\\\u036F]\" +\r\n        \"|[\\\\u203F-\\\\u2040]\";\r\n    let nameCharWithSurrogatePair = nameChar + \"|\" +\r\n        nameStartCharWithSurrogatePair;\r\n\r\n    if (new RegExp(\"^\" + nameStartChar + \"$\").test(str.charAt(0))) {\r\n        if (str.length === 1) {\r\n            return true;\r\n        }\r\n        return new RegExp(\"^(\" + nameCharWithSurrogatePair + \")+$\")\r\n            .test(str.substr(1));\r\n    } else if (str.length >= 2) {\r\n        if (new RegExp(\"^\" + nameStartCharWithSurrogatePair + \"$\")\r\n                .test(str.substr(0, 2))) {\r\n            if (str.length === 2) {\r\n                return true;\r\n            }\r\n            return new RegExp(\"^(\" + nameCharWithSurrogatePair + \")+$\")\r\n                .test(str.substr(2));\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n"
  },
  {
    "__docId__": 261,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "char",
    "memberof": "src/utils/validate.js",
    "longname": "src/utils/validate.js~char",
    "access": "private",
    "export": true,
    "importPath": "xmlcreate/lib/utils/validate.js",
    "importStyle": "{char}",
    "description": "Verifies that the specified string only contains characters permitted by the\nXML specification.",
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} Whether the specified string only contains characters\n                   permitted by the XML specification.\n                   "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "The string to validate."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether the specified string only contains characters\n                   permitted by the XML specification."
    },
    "generator": false
  },
  {
    "__docId__": 262,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "singleChar",
    "memberof": "src/utils/validate.js",
    "longname": "src/utils/validate.js~singleChar",
    "access": "private",
    "export": true,
    "importPath": "xmlcreate/lib/utils/validate.js",
    "importStyle": "{singleChar}",
    "description": "Verifies that the specified string only contains a single character, and\nthat this character is permitted by the XML specification.",
    "lineNumber": 50,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} Whether the specified string only contains a single\n                   character, and that this character is permitted by the\n                   XML specification."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "The string to validate."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether the specified string only contains a single\n                   character, and that this character is permitted by the\n                   XML specification."
    },
    "generator": false
  },
  {
    "__docId__": 263,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "name",
    "memberof": "src/utils/validate.js",
    "longname": "src/utils/validate.js~name",
    "access": "private",
    "export": true,
    "importPath": "xmlcreate/lib/utils/validate.js",
    "importStyle": "{name}",
    "description": "Verifies that the specified string only contains characters permitted by the\nXML specification for names.",
    "lineNumber": 72,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} Whether the specified string only contains characters\n                   permitted by the XML specification for names."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "The string to validate."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Whether the specified string only contains characters\n                   permitted by the XML specification for names."
    },
    "generator": false
  },
  {
    "__docId__": 265,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 266,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 267,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 268,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 269,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 270,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 271,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 272,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 273,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 274,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 275,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 276,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 277,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 278,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 279,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 280,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 281,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 282,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 283,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 284,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 285,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 286,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 287,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 288,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 289,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 290,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 291,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 292,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 293,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 294,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 295,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 296,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 297,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 298,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 299,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 300,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 301,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 302,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 303,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 304,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 305,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 306,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 307,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 308,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 309,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 310,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 311,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 313,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 314,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 315,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 316,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 317,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 318,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 319,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 320,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": "",
    "builtinExternal": true
  }
]